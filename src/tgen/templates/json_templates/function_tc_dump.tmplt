@@--  Template to generate functions to dump a testcase in JSON
@@--  @_GLOBAL_PREFIX_@ Prefix used to prefix all local entities to the unit.
@@--  @_FOR_SPEC_@ Boolean determining is the template is parsed as a
@@--              specification or as a body.
@@--  @_PROC_NAME_@ Name of the subprogram for which we want to dump a TC.
@@--  @_PROC_RETURN_TY_@ name of the return type of the subprogram
@@--  @_PARAM_NAME_@ Simple names of the parameters of the subprogram.
@@--  @_PARAM_TY_@ Ada names of the types of the parameters of the subprogram
@@--  @_PARAM_SLUG_@ Slug name of the types of the parameters of the
@@--                  subprogram.
@@--  @_PROC_UID_@ Subprogram_UID
@@--
@@INCLUDE@@ util.tmplt

   --  Test Case JSON dumper for @_PROC_NAME_@

   procedure @_PROC_NAME_@_Dump_TC
@@TABLE'ALIGN_ON(":")@@
     @_LPAR()_@@_GLOBAL_PREFIX_@_@_PARAM_NAME_@ : @_PARAM_TY_@;
@@END_TABLE@@
      @_GLOBAL_PREFIX_@_Unit_JSON : in out TGen.JSON.JSON_Value;
@@IF@@ @_FOR_SPEC_@
      @_GLOBAL_PREFIX_@_Origin : String := "") with
      Pre => @_GLOBAL_PREFIX_@_Unit_JSON.Kind in TGen.JSON.JSON_Object_Type;
   --  Serialize the test-case represented by the first parameters that
   --  correspond to those of @_PROC_NAME_@ (not necessarily in the same
   --  order), in JSON_Unit, which should be either an empty JSON_Object, or
   --  a JSON object containing already serialized test cases, either through
   --  similar <SUbp_Name>_Dump_TC procedures, or generated by GNATtest.
   --
   --  Origin is used to record which tool created the test-case being
   --  serialized.
@@ELSE@@
      @_GLOBAL_PREFIX_@_Origin : String := "")
   is
      use TGen.JSON;
      Subp_JSON         : JSON_Value;
      Subp_Vectors      : JSON_Array;
      New_Test_Vec      : constant JSON_Value := Create_Object;
      New_Test_Vec_Vals : JSON_Array;
   begin
      if @_GLOBAL_PREFIX_@_Unit_JSON.Has_Field ("@_PROC_UID_@") then
         Subp_JSON := @_GLOBAL_PREFIX_@_Unit_JSON.Get ("@_PROC_UID_@");
         Subp_Vectors := Subp_JSON.Get ("test_vectors");
      else
         Subp_JSON := TGen.JSON.Create_Object;
         Subp_JSON.Set_Field ("fully_qualified_name", "@_PROC_NAME_@");
         Subp_JSON.Set_Field ("generation_complete", True);
      end if;
      New_Test_Vec.Set_Field ("origin", @_GLOBAL_PREFIX_@_Origin);
@@TABLE@@
      declare
         Param_Obj : constant JSON_Value := Create_Object;
      begin
         Param_Obj.Set_Field ("name", "@_PARAM_NAME_@");
         Param_Obj.Set_Field ("type_name", "@_PARAM_TY_@");
         Param_Obj.Set_Field
           ("value",
            @_GLOBAL_PREFIX_@_@_PARAM_SLUG_@_Output (@_GLOBAL_PREFIX_@_@_PARAM_NAME_@));
         TGen.JSON.Append (New_Test_Vec_Vals, Param_Obj);
      end;
@@END_TABLE@@
      New_Test_Vec.Set_Field ("param_values", New_Test_Vec_Vals);
      TGen.JSON.Append (Subp_Vectors, New_Test_Vec);
      Subp_JSON.Set_Field ("test_vectors", Subp_Vectors);
      @_GLOBAL_PREFIX_@_Unit_JSON.Set_Field ("@_PROC_UID_@", Subp_JSON);
    end @_PROC_NAME_@_Dump_TC;
@@END_IF@@
