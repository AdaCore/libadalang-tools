@@--  Template for the body part of the header handling.
@@--  @_GLOBAL_PREFIX_@ Prefix used to prefix all entities local to the unit.
@@--  @_TY_PREFIX_@ Prefix used to prefix all entities for the current type.
@@--  @_TY_NAME_@ Name of the current type.
@@--  @_FIRST_NAME_@ Names of the components for the 'First attributes. Only
@@--       set if the current type is an array.
@@--  @_LAST_NAME_@ Same as above for the 'Last attributes.
@@--  @_ADA_DIM_@ Suffixes of the array attributes for each dimension.
@@--  @_DISCR_NAME_@ Same as above for the discriminants of records.
@@--  @_COMP_PREFIX_@ Prefixes used for all entity of the index types
@@--       for arrays, and of the discriminants for records.
@@--
@@INCLUDE@@ util.tmplt
   --  Input and Output subprograms for headers of type @_TY_NAME_@

   procedure @_TY_PREFIX_@_Read_Header
     (@_GLOBAL_PREFIX_@_JSON : TGen.JSON.JSON_Value;
      @_GLOBAL_PREFIX_@_V    : out @_TY_PREFIX_@_Header_Type)
   is
   begin
@@IF@@ @_FIRST_NAME_@ /= ""
@@--  This is an array header. Read its dimension constraints, which are stored
@@--  in the dimensions field of the JSON object.
   declare
      Dimensions : TGen.JSON.JSON_Array :=
         @_GLOBAL_PREFIX_@_JSON.Get ("dimensions");
      Current_Dimension_Index : Positive :=
         TGen.JSON.Array_First (Dimensions);
   begin
@@TABLE@@
      declare
         Dimension : constant TGen.JSON.JSON_Value :=
            TGen.JSON.Array_Element (Dimensions, Current_Dimension_Index);
         Fst : constant TGen.JSON.JSON_Value := Dimension.Get ("First");
         Lst : constant TGen.JSON.JSON_Value := Dimension.Get ("Last");
      begin
         @_COMP_PREFIX_@_Read_Base
           (Fst, @_GLOBAL_PREFIX_@_V.@_FIRST_NAME_@);
         @_COMP_PREFIX_@_Read_Base
           (Lst, @_GLOBAL_PREFIX_@_V.@_LAST_NAME_@);
         Current_Dimension_Index :=
            TGen.JSON.Array_Next (Dimensions, Current_Dimension_Index);
      end;
@@END_TABLE@@
   end;
@@ELSE@@
@@--  This is a discriminated record header. Read the discriminants values.
     declare
        Discriminants : constant TGen.JSON.JSON_Value :=
           TGen.JSON.Get (@_GLOBAL_PREFIX_@_JSON, "discriminants");
      begin
@@TABLE@@
         @_COMP_PREFIX_@_Read
           (TGen.JSON.Get (Discriminants, "@_DISCR_NAME_@"),
            @_GLOBAL_PREFIX_@_V.@_DISCR_NAME_@);
@@END_TABLE@@
      end;
@@END_IF@@
   end @_TY_PREFIX_@_Read_Header;

   procedure @_TY_PREFIX_@_Write_Header
     (@_GLOBAL_PREFIX_@_JSON : in out TGen.JSON.JSON_Value;
      @_GLOBAL_PREFIX_@_V    : @_TY_NAME_@)
   is
   begin
@@IF@@ @_FIRST_NAME_@ /= ""
@@--  This is an array. Write its dimension constraints down, in the
@@--  dimension field of the resulting JSON.
   declare
      Dimensions : TGen.JSON.JSON_Array;
   begin
@@TABLE@@
      declare
         Dimension : TGen.JSON.JSON_Value := TGen.JSON.Create_Object;
         Fst       : TGen.JSON.JSON_Value;
         Lst       : TGen.JSON.JSON_Value;
      begin
         @_COMP_PREFIX_@_Write_Base
           (Fst, @_GLOBAL_PREFIX_@_V'First@_ADA_DIM_@);
         @_COMP_PREFIX_@_Write_Base
           (Lst, @_GLOBAL_PREFIX_@_V'Last@_ADA_DIM_@);
         TGen.JSON.Set_Field (Dimension, "First", Fst);
         TGen.JSON.Set_Field (Dimension, "Last", Lst);
         TGen.JSON.Append (Dimensions, Dimension);
      end;
@@END_TABLE@@
      TGen.JSON.Set_Field
         (@_GLOBAL_PREFIX_@_JSON,
          "dimensions",
          TGen.JSON.Create (Dimensions));
   end;

@@ELSE@@
@@--  This is a record. Write its discriminant constraints down.
      declare
         Discriminants : constant TGen.JSON.JSON_Value :=
            TGen.JSON.Create_Object;
      begin
@@TABLE@@
         declare
            @_GLOBAL_PREFIX_@_JSON_Header : TGen.JSON.JSON_Value;
         begin
            @_COMP_PREFIX_@_Write
              (@_GLOBAL_PREFIX_@_JSON_Header, @_GLOBAL_PREFIX_@_V.@_DISCR_NAME_@);
            TGen.JSON.Set_Field
               (Discriminants,
                "@_DISCR_NAME_@",
                @_GLOBAL_PREFIX_@_JSON_Header);
         end;
@@END_TABLE@@
         TGen.JSON.Set_Field
            (@_GLOBAL_PREFIX_@_JSON,
             "discriminants",
             Discriminants);
      end;
@@END_IF@@
   end @_TY_PREFIX_@_Write_Header;

   function @_TY_PREFIX_@_Input_Header
     (@_GLOBAL_PREFIX_@_JSON : TGen.JSON.JSON_Value)
     return @_TY_PREFIX_@_Header_Type
   is
      @_GLOBAL_PREFIX_@_Buffer : Unsigned_8 := 0;
      @_GLOBAL_PREFIX_@_Offset : Offset_Type := 0;
   begin
      return @_GLOBAL_PREFIX_@_V : @_TY_PREFIX_@_Header_Type do
        @_TY_PREFIX_@_Read_Header
           (@_GLOBAL_PREFIX_@_JSON, @_GLOBAL_PREFIX_@_V);
      end return;
   end @_TY_PREFIX_@_Input_Header;

   procedure @_TY_PREFIX_@_Output_Header
     (@_GLOBAL_PREFIX_@_JSON : in out TGen.JSON.JSON_Value;
      @_GLOBAL_PREFIX_@_V    : @_TY_NAME_@) is
   begin
      @_TY_PREFIX_@_Write_Header
         (@_GLOBAL_PREFIX_@_JSON, @_GLOBAL_PREFIX_@_V);
   end @_TY_PREFIX_@_Output_Header;
