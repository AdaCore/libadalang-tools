@@--  Template for the specification of a scalar type representation.
@@--  @_TY_PREFIX_@ Prefix used to prefix all entities for the current type.
@@--  @_TY_NAME_@ Name of the current type.
@@--  @_SCALAR_TYP_@ Kind of the discrete typ
@@--  See each of the scalar type template below for further parameter
@@--  specification

@@IF@@ @_SCALAR_TYP_@ = "Signed_Int_Typ"
   package @_TY_PREFIX_@_Typ_Conversions is
      new TGen.Big_Int.Signed_Conversions (@_TY_NAME_@);

   @_TY_PREFIX_@_Typ : constant TGen.Types.Int_Types.Signed_Int_Typ :=
      (Name => TGen.Strings.To_Qualified_Name ("@_TY_NAME_@"),
       Is_Static => True,
       Range_Value =>
          TGen.Types.Discrete_Types.Int_Range'
             (Min =>
                 @_TY_PREFIX_@_Typ_Conversions.To_Big_Integer
                    (@_TY_NAME_@'First),
              Max =>
                 @_TY_PREFIX_@_Typ_Conversions.To_Big_Integer
                    (@_TY_NAME_@'Last)),
       others => <>);

@@ELSIF@@ @_SCALAR_TYP_@ = "Mod_Int_Typ"
      @_TY_PREFIX_@_Typ : constant TGen.Types.Int_Types.Mod_Int_Typ :=
      (Name => TGen.Strings.To_Qualified_Name ("@_TY_NAME_@"),
       Is_Static => True,
       Mod_Value =>
          TGen.Big_Int.From_Universal_Image (@_TY_NAME_@'Modulus'Image),
       others => <>);

@@ELSIF@@ @_SCALAR_TYP_@ = "Char_Typ"
   @_CONSTRAINT_SPEC_@
   @_TY_PREFIX_@_Typ : constant TGen.Types.Enum_Types.Char_Typ :=
      (Name => TGen.Strings.To_Qualified_Name ("@_TY_NAME_@"),
      Is_Static => True,
@@IF@@ @_HAS_RANGE_@
       Has_Range => True,
       Range_Value => @_TY_PREFIX_@_Constraint,
@@ELSE@@
       Has_Range => False,
@@END_IF@@
       others => <>);

@@ELSIF@@ @_SCALAR_TYP_@ = "Other_Enum_Typ"
   @_TY_PREFIX_@_Typ : TGen.Types.Enum_Types.Other_Enum_Typ :=
      (Name      => TGen.Strings.To_Qualified_Name ("@_TY_NAME_@"),
       Is_Static => True,
       others    => <>);

@@ELSIF@@ @_SCALAR_TYP_@ = "Bool_Typ"
   @_TY_PREFIX_@_Typ : constant TGen.Types.Enum_Types.Bool_Typ :=
      (Name      => TGen.Strings.To_Qualified_Name ("@_TY_NAME_@"),
       Is_Static => True,
       others    => <>);

@@ELSIF@@ @_SCALAR_TYP_@ = "Float_Typ"
   package @_TY_PREFIX_@_Typ_Conversions is
      new TGen.Big_Reals.Float_Conversions (@_TY_NAME_@);
   @_TY_PREFIX_@_Typ : constant TGen.Types.Real_Types.Float_Typ :=
      (Name         => TGen.Strings.To_Qualified_Name ("@_TY_NAME_@"),
       Is_Static    => True,
       Has_Range    => True,
       Digits_Value => @_TY_NAME_@'Digits,
       Range_Value  =>
          TGen.Types.Real_Types.Float_Range'
             (Min =>
                 @_TY_PREFIX_@_Typ_Conversions.To_Big_Real
                    (@_TY_NAME_@'First),
              Max =>
                 @_TY_PREFIX_@_Typ_Conversions.To_Big_Real
                    (@_TY_NAME_@'Last)),
       others => <>);

@@ELSIF@@ @_SCALAR_TYP_@ = "Ordinary_Fixed_Typ"
   @_TY_PREFIX_@_Typ : constant TGen.Types.Real_Types.Ordinary_Fixed_Typ :=
      (Name         => TGen.Strings.To_Qualified_Name ("@_TY_NAME_@"),
       Is_Static    => True,
       Delta_Value  =>
          TGen.Big_Reals.From_Universal_Image (@_TY_NAME_@'Delta'Image),
       Range_Value  =>
          TGen.Types.Real_Types.Float_Range'
             (Min =>
                 TGen.Big_Reals.From_Universal_Image (@_TY_NAME_@'First'Image),
              Max =>
                 TGen.Big_Reals.From_Universal_Image (@_TY_NAME_@'Last'Image)),
       others => <>);

@@ELSIF@@ @_SCALAR_TYP_@ = "Decimal_Fixed_Typ"
   @_TY_PREFIX_@_Typ : constant TGen.Types.Real_Types.Decimal_Fixed_Typ :=
      (Name         => TGen.Strings.To_Qualified_Name ("@_TY_NAME_@"),
       Is_Static    => True,
       Has_Range    => True,
       Delta_Value  =>
          TGen.Big_Reals.From_Universal_Image (@_TY_NAME_@'Delta'Image),
       Digits_Value => @_TY_NAME_@'Digits,
       Range_Value  =>
          TGen.Types.Real_Types.Float_Range'
             (Min =>
                 TGen.Big_Reals.From_Universal_Image (@_TY_NAME_@'First'Image),
              Max =>
                 TGen.Big_Reals.From_Universal_Image (@_TY_NAME_@'Last'Image)),
       others => <>);

@@END_IF@@
   @_TY_PREFIX_@_Typ_Ref : TGen.Types.SP.Ref;
