procedure Pretty is

    package Ip is

        type Horizontal_Enum_Type is (Red, Blue, Green);

        type Short_Enum_Type is (Red, Blue, Green);

        type Short_List_Enum_Type is
          (Red, Blue1, Blue2, Blue3, Blue4, Blue5, Blue6, Blue7, Blue8, Blue9, Blue0, Blue11, Blue12,
           Blue13, Blue14, Blue15, Blue16, Blue17, Green);

        type Long_Enum_Type is
          (Valuexxxxxxxxxxxxxxxxxxxxxxxxx1, Valuexxxxxxxxxxxxxxxxxxxxxxxxx2,
           Valuexxxxxxxxxxxxxxxxxxxxxxxxx3);

    end Ip;

    type Horizontal_Enum_Type is (Red, Blue, Green);

    type Short_Enum_Type is (Red, Blue, Green);

    type Short_List_Enum_Type is
      (Red, Blue1, Blue2, Blue3, Blue4, Blue5, Blue6, Blue7, Blue8, Blue9, Blue0, Blue11, Blue12, Blue13,
       Blue14, Blue15, Blue16, Blue17, Green);

    type Long_Enum_Type is
      (Valuexxxxxxxxxxxxxxxxxxxxxxxxx1, Valuexxxxxxxxxxxxxxxxxxxxxxxxx2,
       Valuexxxxxxxxxxxxxxxxxxxxxxxxx3);

    Short_Enum_Lookup : constant array (1 .. 3) of Short_Enum_Type := (1 => Red, 2 => Blue, 3 => Green);

    Long_Enum_Lookup : constant array (1 .. 3) of Long_Enum_Type :=
      (1 => Valuexxxxxxxxxxxxxxxxxxxxxxxxx1, 2 => Valuexxxxxxxxxxxxxxxxxxxxxxxxx2,
       3 => Valuexxxxxxxxxxxxxxxxxxxxxxxxx3);

    Short_Ext_Lookup : constant array (1 .. 3) of Ip.Short_Enum_Type :=
      (1 => Ip.Red, 2 => Ip.Blue, 3 => Ip.Green);

    Long_Ext_Lookup : constant array (1 .. 3) of Ip.Long_Enum_Type :=
      (1 => Ip.Valuexxxxxxxxxxxxxxxxxxxxxxxxx1, 2 => Ip.Valuexxxxxxxxxxxxxxxxxxxxxxxxx2,
       3 => Ip.Valuexxxxxxxxxxxxxxxxxxxxxxxxx3);

begin

    null;

end Pretty;
procedure Pretty is

    package Ip is

        type Horizontal_Enum_Type is
          (Red,
           Blue,
           Green);

        type Short_Enum_Type is
          (Red,
           Blue,
           Green);

        type Short_List_Enum_Type is
          (Red,
           Blue1,
           Blue2,
           Blue3,
           Blue4,
           Blue5,
           Blue6,
           Blue7,
           Blue8,
           Blue9,
           Blue0,
           Blue11,
           Blue12,
           Blue13,
           Blue14,
           Blue15,
           Blue16,
           Blue17,
           Green);

        type Long_Enum_Type is
          (Valuexxxxxxxxxxxxxxxxxxxxxxxxx1,
           Valuexxxxxxxxxxxxxxxxxxxxxxxxx2,
           Valuexxxxxxxxxxxxxxxxxxxxxxxxx3);

    end Ip;

    type Horizontal_Enum_Type is
      (Red,
       Blue,
       Green);

    type Short_Enum_Type is
      (Red,
       Blue,
       Green);

    type Short_List_Enum_Type is
      (Red,
       Blue1,
       Blue2,
       Blue3,
       Blue4,
       Blue5,
       Blue6,
       Blue7,
       Blue8,
       Blue9,
       Blue0,
       Blue11,
       Blue12,
       Blue13,
       Blue14,
       Blue15,
       Blue16,
       Blue17,
       Green);

    type Long_Enum_Type is
      (Valuexxxxxxxxxxxxxxxxxxxxxxxxx1,
       Valuexxxxxxxxxxxxxxxxxxxxxxxxx2,
       Valuexxxxxxxxxxxxxxxxxxxxxxxxx3);

    Short_Enum_Lookup : constant array (1 .. 3) of Short_Enum_Type :=
      (1 => Red,
       2 => Blue,
       3 => Green);

    Long_Enum_Lookup : constant array (1 .. 3) of Long_Enum_Type :=
      (1 => Valuexxxxxxxxxxxxxxxxxxxxxxxxx1,
       2 => Valuexxxxxxxxxxxxxxxxxxxxxxxxx2,
       3 => Valuexxxxxxxxxxxxxxxxxxxxxxxxx3);

    Short_Ext_Lookup : constant array (1 .. 3) of Ip.Short_Enum_Type :=
      (1 => Ip.Red,
       2 => Ip.Blue,
       3 => Ip.Green);

    Long_Ext_Lookup : constant array (1 .. 3) of Ip.Long_Enum_Type :=
      (1 => Ip.Valuexxxxxxxxxxxxxxxxxxxxxxxxx1,
       2 => Ip.Valuexxxxxxxxxxxxxxxxxxxxxxxxx2,
       3 => Ip.Valuexxxxxxxxxxxxxxxxxxxxxxxxx3);

begin

    null;

end Pretty;
