Extracting as a ADA_SUBP_KIND_PROCEDURE:
main.adb
6:1-6:1 
      procedure Foo;

      procedure Foo is
      begin
             null;  --  Some Comments
             --  Some comment
                   null;null;null;  --  Some Comments
         null;  --  Some Comments
             --  Some Comments
             null --  Some Comments
             --  Some Comments
             ;null;
      end Foo;


7:7-14:13 Foo;

Extracting as a ADA_SUBP_KIND_PROCEDURE:
main.adb
6:1-6:1 
      procedure Foo;

      procedure Foo is
      begin
         null;null;
      end Foo;


9:18-9:28 Foo;

Extracting as a ADA_SUBP_KIND_PROCEDURE:
main.adb
6:1-6:1 
      procedure Foo;

      procedure Foo is
      begin
         null;  --  Some Comments
      end Foo;


7:7-7:31 Foo;

Extracting as a ADA_SUBP_KIND_PROCEDURE:
main.adb
6:1-6:1 
      procedure Foo;

      procedure Foo is
      begin
         null;
      end Foo;


7:7-7:12 Foo;

Extracting as a ADA_SUBP_KIND_PROCEDURE:
main.adb
6:1-6:1 
      procedure Foo;

      procedure Foo is
      begin
         null;  --  Some Comments
         --  Some comment
      end Foo;


7:7-8:23 Foo;

Extracting as a ADA_SUBP_KIND_PROCEDURE:
main.adb
6:1-6:1 
      procedure Foo;

      procedure Foo is
      begin
         null;  --  Some Comments
         --  Some comment
               null;
      end Foo;


7:7-9:18 Foo;

Extracting as a ADA_SUBP_KIND_PROCEDURE:
main.adb
6:1-6:1 
      procedure Foo;

      procedure Foo is
      begin
             null;  --  Some Comments
             --  Some comment
                   null;null;null;  --  Some Comments
         null;  --  Some Comments
             --  Some Comments
             null --  Some Comments
             --  Some Comments
             ;
      end Foo;


7:7-14:8 Foo;

Extracting as a ADA_SUBP_KIND_PROCEDURE:
main.adb
6:1-6:1 
      procedure Foo;

      procedure Foo is
      begin
         null;null;null;
      end Foo;


9:13-9:28 Foo;

Extracting as a ADA_SUBP_KIND_PROCEDURE:
main.adb
6:1-6:1 
      procedure Foo;

      procedure Foo is
      begin
         null;null;null;  --  Some Comments
      end Foo;


9:13-9:47 Foo;

Extracting as a ADA_SUBP_KIND_PROCEDURE:
main.adb
6:1-6:1 
      procedure Foo;

      procedure Foo is
      begin
                   null;null;null;  --  Some Comments
         null;
      end Foo;


9:13-10:8 Foo;

Extracting as a ADA_SUBP_KIND_PROCEDURE:
main.adb
6:1-6:1 
      procedure Foo;

      procedure Foo is
      begin
                   null;null;null;  --  Some Comments
         null;  --  Some Comments
      end Foo;


9:13-10:27 Foo;

Extracting as a ADA_SUBP_KIND_FUNCTION:
main.adb
20:1-20:1 
      function Foo return Integer;

      function Foo return Integer is
      begin
         B := 1;  --  Some Comments

         null; return 1;  --  Some Comments
                        --  Some Comments
      end Foo;


25:7-28:39 B := Foo;

Extracting as a ADA_SUBP_KIND_PROCEDURE:
main.adb
20:1-20:1 
      procedure Foo;

      procedure Foo is
      begin
         B := 1;  --  Some Comments

         null; B := 1;  --  Some Comments
                        --  Some Comments
      end Foo;


25:7-28:39 Foo;

Extracting as a ADA_SUBP_KIND_FUNCTION:
main.adb
20:1-20:1 
      function Foo return Integer;

      function Foo return Integer is
      begin
         null; B := 1;  --  Some Comments
                        --  Some Comments

         null; B :=  --  Some Comments
                     --  Some Comments
           1;  --  Some Comments
               --  Some Comments

         --  Some Comments
         --  Some Comments
         return 1;
      end Foo;


27:7-37:11 B := Foo;

Extracting as a ADA_SUBP_KIND_PROCEDURE:
main.adb
20:1-20:1 
      procedure Foo;

      procedure Foo is
      begin
         null; B := 1;  --  Some Comments
                        --  Some Comments

         null; B :=  --  Some Comments
                     --  Some Comments
           1;  --  Some Comments
               --  Some Comments

         B :=  --  Some Comments
               --  Some Comments
           1;
      end Foo;


27:7-37:11 Foo;

Extracting as a ADA_SUBP_KIND_FUNCTION:
main.adb
20:1-20:1 
      function Foo return Integer;

      function Foo return Integer is
      begin
         B :=  --  Some Comments
                     --  Some Comments
           1;  --  Some Comments
               --  Some Comments

         --  Some Comments
         --  Some Comments
         return 1;  --  Some Comments
               --  Some Comments

         --  Some Comments
      end Foo;


30:13-40:24 B := Foo;

Extracting as a ADA_SUBP_KIND_PROCEDURE:
main.adb
20:1-20:1 
      procedure Foo;

      procedure Foo is
      begin
         B :=  --  Some Comments
                     --  Some Comments
           1;  --  Some Comments
               --  Some Comments

         B :=  --  Some Comments
               --  Some Comments
           1;  --  Some Comments
               --  Some Comments

         --  Some Comments
      end Foo;


30:13-40:24 Foo;

Extracting as a ADA_SUBP_KIND_PROCEDURE:
main.adb
48:1-48:1 
      procedure Foo
        (CC : Integer);

      procedure Foo
        (CC : Integer) is
      begin
         Ada.Text_IO.Put_Line (CC'Image);
      end Foo;


52:10-52:42 Foo (CC);

Extracting as a ADA_SUBP_KIND_PROCEDURE:
main.adb
48:1-48:1 
      procedure Foo
        (CC : Integer);

      procedure Foo
        (CC : Integer) is
      begin
         null;
         Ada.Text_IO.Put_Line (CC'Image);
      end Foo;


51:10-52:42 Foo (CC);

Extracting as a ADA_SUBP_KIND_FUNCTION:
main.adb
48:1-48:1 
      function Foo
        (CC : Integer)
         return Integer;

      function Foo
        (CC : Integer)
         return Integer is
      begin
         return CC;
      end Foo;


53:10-53:18 C := Foo (CC);

Extracting as a ADA_SUBP_KIND_PROCEDURE:
main.adb
48:1-48:1 
      procedure Foo
        (CC : Integer);

      procedure Foo
        (CC : Integer) is
      begin
         C := CC;
      end Foo;


53:10-53:18 Foo (CC);

Extracting as a ADA_SUBP_KIND_FUNCTION:
main.adb
48:1-48:1 
      function Foo
        (CC : Integer)
         return Integer;

      function Foo
        (CC : Integer)
         return Integer is
      begin
         Ada.Text_IO.Put_Line (CC'Image);
         return CC;
      end Foo;


52:10-53:18 C := Foo (CC);

Extracting as a ADA_SUBP_KIND_PROCEDURE:
main.adb
48:1-48:1 
      procedure Foo
        (CC : Integer);

      procedure Foo
        (CC : Integer) is
      begin
         Ada.Text_IO.Put_Line (CC'Image);
         C := CC;
      end Foo;


52:10-53:18 Foo (CC);

Extracting as a ADA_SUBP_KIND_PROCEDURE:
main.adb
60:1-60:1 
      procedure Foo;

      procedure Foo is
      begin
         null;
      end Foo;


62:10-62:15 Foo;

Extracting as a ADA_SUBP_KIND_FUNCTION:
main.adb
60:1-60:1 
      function Foo return Integer;

      function Foo return Integer is
      begin
         return 1;
      end Foo;


63:10-63:17 D := Foo;

Extracting as a ADA_SUBP_KIND_PROCEDURE:
main.adb
60:1-60:1 
      procedure Foo
        (D : out Integer);

      procedure Foo
        (D : out Integer) is
      begin
         D := 1;
      end Foo;


63:10-63:17 Foo (D);

Extracting as a ADA_SUBP_KIND_PROCEDURE:
main.adb
60:1-60:1 
      procedure Foo
        (D : Integer);

      procedure Foo
        (D : Integer) is
      begin
         Ada.Text_IO.Put_Line (D'Image);
      end Foo;


66:10-66:41 Foo (D);

Extracting as a ADA_SUBP_KIND_PROCEDURE:
main.adb
60:1-60:1 
      procedure Foo
        (D : Integer);

      procedure Foo
        (D : Integer) is
      begin
         null;
         Ada.Text_IO.Put_Line (D'Image);
      end Foo;


65:10-66:41 Foo (D);

Extracting as a ADA_SUBP_KIND_FUNCTION:
main.adb
60:1-60:1 
      function Foo
        (D : Integer)
         return Integer;

      function Foo
        (D : Integer)
         return Integer is
      begin
         return D;
      end Foo;


67:10-67:17 D := Foo (D);

Extracting as a ADA_SUBP_KIND_PROCEDURE:
main.adb
60:1-60:1 
      procedure Foo
        (D : in out Integer);

      procedure Foo
        (D : in out Integer) is
      begin
         D := D;
      end Foo;


67:10-67:17 Foo (D);

Extracting as a ADA_SUBP_KIND_FUNCTION:
main.adb
60:1-60:1 
      function Foo
        (D : Integer)
         return Integer;

      function Foo
        (D : Integer)
         return Integer is
      begin
         Ada.Text_IO.Put_Line (D'Image);
         return D;
      end Foo;


66:10-67:17 D := Foo (D);

Extracting as a ADA_SUBP_KIND_PROCEDURE:
main.adb
60:1-60:1 
      procedure Foo
        (D : in out Integer);

      procedure Foo
        (D : in out Integer) is
      begin
         Ada.Text_IO.Put_Line (D'Image);
         D := D;
      end Foo;


66:10-67:17 Foo (D);

Extracting as a ADA_SUBP_KIND_FUNCTION:
main.adb
60:1-60:1 
      function Foo
        (D : in out Integer)
         return Integer;

      function Foo
        (D : in out Integer)
         return Integer is
      begin
         D := D;
         return 1;
      end Foo;


67:10-68:17 D := Foo (D);

Extracting as a ADA_SUBP_KIND_PROCEDURE:
main.adb
60:1-60:1 
      procedure Foo
        (D : in out Integer);

      procedure Foo
        (D : in out Integer) is
      begin
         D := D;
         D := 1;
      end Foo;


67:10-68:17 Foo (D);

Extracting as a ADA_SUBP_KIND_FUNCTION:
main.adb
60:1-60:1 
      function Foo
        (D : out Integer)
         return Integer;

      function Foo
        (D : out Integer)
         return Integer is
      begin
         D := 1;
         return 1;
      end Foo;


68:10-69:18 DD := Foo (D);

Extracting as a ADA_SUBP_KIND_PROCEDURE:
main.adb
60:1-60:1 
      procedure Foo
        (D : out Integer);

      procedure Foo
        (D : out Integer) is
      begin
         D := 1;
         DD := 1;
      end Foo;


68:10-69:18 Foo (D);

Extracting as a ADA_SUBP_KIND_FUNCTION:
main.adb
74:1-74:1 
      function Foo
        (E : Ada.Exceptions.Exception_Occurrence;
         EE : Integer)
         return Integer;

      function Foo
        (E : Ada.Exceptions.Exception_Occurrence;
         EE : Integer)
         return Integer is
      begin
         Ada.Text_IO.Put_Line (Ada.Exceptions.Exception_Information (E));
         return EE;
      end Foo;


82:16-83:26 EEE := Foo (E, EE);

Extracting as a ADA_SUBP_KIND_PROCEDURE:
main.adb
74:1-74:1 
      procedure Foo
        (E : Ada.Exceptions.Exception_Occurrence;
         EE : Integer;
         EEE : out Integer);

      procedure Foo
        (E : Ada.Exceptions.Exception_Occurrence;
         EE : Integer;
         EEE : out Integer) is
      begin
         Ada.Text_IO.Put_Line (Ada.Exceptions.Exception_Information (E));
         EEE := EE;
      end Foo;


82:16-83:26 Foo (E, EE, EEE);

Extracting as a ADA_SUBP_KIND_FUNCTION:
main.adb
74:1-74:1 
      function Foo
        (E : Ada.Exceptions.Exception_Occurrence;
         EE : Integer;
         EEE : out Integer)
         return Integer;

      function Foo
        (E : Ada.Exceptions.Exception_Occurrence;
         EE : Integer;
         EEE : out Integer)
         return Integer is
      begin
         Ada.Text_IO.Put_Line (Ada.Exceptions.Exception_Information (E));
         EEE := EE;  --  Some Comments
         return EEE;
      end Foo;


82:16-84:27 EEE := Foo (E, EE, EEE);

Extracting as a ADA_SUBP_KIND_PROCEDURE:
main.adb
74:1-74:1 
      procedure Foo
        (E : Ada.Exceptions.Exception_Occurrence;
         EE : Integer;
         EEE : out Integer);

      procedure Foo
        (E : Ada.Exceptions.Exception_Occurrence;
         EE : Integer;
         EEE : out Integer) is
      begin
         Ada.Text_IO.Put_Line (Ada.Exceptions.Exception_Information (E));
         EEE := EE;  --  Some Comments
         EEE := EEE;
      end Foo;


82:16-84:27 Foo (E, EE, EEE);

Extracting as a ADA_SUBP_KIND_FUNCTION:
main.adb
74:1-74:1 
      function Foo
        (E : Ada.Exceptions.Exception_Occurrence;
         EE : Integer)
         return Integer;

      function Foo
        (E : Ada.Exceptions.Exception_Occurrence;
         EE : Integer)
         return Integer is
      begin
         --  Some Comments
         Ada.Text_IO.Put_Line (Ada.Exceptions.Exception_Information (E));
         return EE;
      end Foo;


81:16-83:26 EEE := Foo (E, EE);

Extracting as a ADA_SUBP_KIND_PROCEDURE:
main.adb
74:1-74:1 
      procedure Foo
        (E : Ada.Exceptions.Exception_Occurrence;
         EE : Integer;
         EEE : out Integer);

      procedure Foo
        (E : Ada.Exceptions.Exception_Occurrence;
         EE : Integer;
         EEE : out Integer) is
      begin
         --  Some Comments
         Ada.Text_IO.Put_Line (Ada.Exceptions.Exception_Information (E));
         EEE := EE;
      end Foo;


81:16-83:26 Foo (E, EE, EEE);

Extracting as a ADA_SUBP_KIND_FUNCTION:
main.adb
74:1-74:1 
      function Foo
        (E : Ada.Exceptions.Exception_Occurrence;
         EE : Integer)
         return Integer;

      function Foo
        (E : Ada.Exceptions.Exception_Occurrence;
         EE : Integer)
         return Integer is
      begin
         --  Some Comments
         Ada.Text_IO.Put_Line (Ada.Exceptions.Exception_Information (E));
         return EE;  --  Some Comments
      end Foo;


81:16-83:45 EEE := Foo (E, EE);

Extracting as a ADA_SUBP_KIND_PROCEDURE:
main.adb
74:1-74:1 
      procedure Foo
        (E : Ada.Exceptions.Exception_Occurrence;
         EE : Integer;
         EEE : out Integer);

      procedure Foo
        (E : Ada.Exceptions.Exception_Occurrence;
         EE : Integer;
         EEE : out Integer) is
      begin
         --  Some Comments
         Ada.Text_IO.Put_Line (Ada.Exceptions.Exception_Information (E));
         EEE := EE;  --  Some Comments
      end Foo;


81:16-83:45 Foo (E, EE, EEE);

Extracting as a ADA_SUBP_KIND_FUNCTION:
main.adb
74:1-74:1 
      function Foo
        (E : Ada.Exceptions.Exception_Occurrence;
         EE : Integer;
         EEE : out Integer)
         return Integer;

      function Foo
        (E : Ada.Exceptions.Exception_Occurrence;
         EE : Integer;
         EEE : out Integer)
         return Integer is
      begin
         --  Some Comments
         Ada.Text_IO.Put_Line (Ada.Exceptions.Exception_Information (E));
         EEE := EE;  --  Some Comments
         return EEE;
      end Foo;


81:16-84:27 EEE := Foo (E, EE, EEE);

Extracting as a ADA_SUBP_KIND_PROCEDURE:
main.adb
74:1-74:1 
      procedure Foo
        (E : Ada.Exceptions.Exception_Occurrence;
         EE : Integer;
         EEE : out Integer);

      procedure Foo
        (E : Ada.Exceptions.Exception_Occurrence;
         EE : Integer;
         EEE : out Integer) is
      begin
         --  Some Comments
         Ada.Text_IO.Put_Line (Ada.Exceptions.Exception_Information (E));
         EEE := EE;  --  Some Comments
         EEE := EEE;
      end Foo;


81:16-84:27 Foo (E, EE, EEE);

Extracting as a ADA_SUBP_KIND_FUNCTION:
main.adb
74:1-74:1 
      function Foo
        (E : Ada.Exceptions.Exception_Occurrence;
         EE : Integer;
         EEE : out Integer)
         return Integer;

      function Foo
        (E : Ada.Exceptions.Exception_Occurrence;
         EE : Integer;
         EEE : out Integer)
         return Integer is
      begin
         --  Some Comments
         Ada.Text_IO.Put_Line (Ada.Exceptions.Exception_Information (E));
         EEE := EE;  --  Some Comments
         return EEE;
         --  Some Comments
      end Foo;


81:16-85:33 EEE := Foo (E, EE, EEE);

Extracting as a ADA_SUBP_KIND_PROCEDURE:
main.adb
74:1-74:1 
      procedure Foo
        (E : Ada.Exceptions.Exception_Occurrence;
         EE : Integer;
         EEE : out Integer);

      procedure Foo
        (E : Ada.Exceptions.Exception_Occurrence;
         EE : Integer;
         EEE : out Integer) is
      begin
         --  Some Comments
         Ada.Text_IO.Put_Line (Ada.Exceptions.Exception_Information (E));
         EEE := EE;  --  Some Comments
         EEE := EEE;
         --  Some Comments
      end Foo;


81:16-85:33 Foo (E, EE, EEE);

Extracting as a ADA_SUBP_KIND_PROCEDURE:
main.adb
100:1-100:1 
      procedure Foo
        (E : out Integer);

      procedure Foo
        (E : out Integer) is
      begin
         E := 1;
         EE := E;
         Dummy_Default (E);
      end Foo;


102:10-104:28 Foo (E);

Extracting as a ADA_SUBP_KIND_FUNCTION:
main.adb
100:1-100:1 
      function Foo
        (E : Integer)
         return Integer;

      function Foo
        (E : Integer)
         return Integer is
      begin
         EE := E;
         Dummy_Default (E);
         return 1;
      end Foo;


103:10-105:17 E := Foo (E);

Extracting as a ADA_SUBP_KIND_PROCEDURE:
main.adb
100:1-100:1 
      procedure Foo
        (E : in out Integer);

      procedure Foo
        (E : in out Integer) is
      begin
         EE := E;
         Dummy_Default (E);
         E := 1;
      end Foo;


103:10-105:17 Foo (E);

Extracting as a ADA_SUBP_KIND_PROCEDURE:
main.adb
100:1-100:1 
      procedure Foo
        (E : Integer);

      procedure Foo
        (E : Integer) is
      begin
         Dummy_Default (E);
      end Foo;


106:10-106:28 Foo (E);

Extracting as a ADA_SUBP_KIND_PROCEDURE:
main.adb
100:1-100:1 
      procedure Foo
        (E : Integer);

      procedure Foo
        (E : Integer) is
      begin
         Dummy_In (E);
      end Foo;


107:10-107:23 Foo (E);

Extracting as a ADA_SUBP_KIND_FUNCTION:
main.adb
113:1-113:1 
      function Foo return Integer;

      function Foo return Integer is
      begin
         --  Some Comments
         null;
         return Dummy_In_Out (GG);
      end Foo;


115:10-117:35 return Foo;

Extracting as a ADA_SUBP_KIND_FUNCTION:
main.adb
113:1-113:1 
      function Foo return Integer;

      function Foo return Integer is
      begin
         null;
         return Dummy_In_Out (GG);  --  Some Comments
      end Foo;


116:10-117:54 return Foo;

Extracting as a ADA_SUBP_KIND_FUNCTION:
main.adb
113:1-113:1 
      function Foo return Integer;

      function Foo return Integer is
      begin
         return Dummy_In_Out (GG);
      end Foo;


117:10-117:35 return Foo;

Extracting as a ADA_SUBP_KIND_FUNCTION:
main.adb
113:1-113:1 
      function Foo return Integer;

      function Foo return Integer is
      begin
         return Dummy_In_Out (GG);  --  Some Comments
      end Foo;


117:10-117:54 return Foo;

Extracting as a ADA_SUBP_KIND_FUNCTION:
main.adb
113:1-113:1 
      function Foo return Integer;

      function Foo return Integer is
      begin
         return Dummy_Out (GG);
      end Foo;


120:10-120:32 return Foo;

