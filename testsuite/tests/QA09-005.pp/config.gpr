abstract project Config is

   -----------------------------------------------------------------------------
   -- Standard Source directories
   -----------------------------------------------------------------------------

   src_private := "src/private";
   src_public  := "src/public";

   Source_Dir_Lim         := (src_public);
   Source_Dir             := Source_Dir_Lim & (src_private);
   Source_Dir_Host        := Source_Dir; -- & private host path src/private/target
   Source_Dir_Sim         := Source_Dir; -- & private simulation path
   Source_Dir_HostSim     := Source_Dir; -- & private simulation host path
   Source_Dir_TargetSim   := Source_Dir; -- & private host path with simulation
   Source_Dir_TargetBoard := Source_Dir; -- & private host path with board
   AddHost                := "";         -- Path extention for different hosts
   AddSim                 := "";         -- Path extention for simulation mode
   AddPath                := "";         -- Path extention for bin and obj
   AddBoard               := "";         -- Path extension for board type
   ExecPath               := "";
   DLLPath                := "";

   -----------------------------------------------------------------------------
   -- Define user customizable config
   -----------------------------------------------------------------------------

   type Build_Type is ("CW183", "CW194", "Native", "Library");
   Build_Target : Build_Type := external ("BUILD_TYPE", "Native");

   type Simulation_Type is  ("Off", "On");
   Simulation : Simulation_Type := external ("SIMULATION" ,"Off");

   -----------------------------------------------------------------------------
   -- Deduced config
   -----------------------------------------------------------------------------

   type Debug_Type is ("Sisseln_51_Labor");
   Debug : Debug_Type := "Sisseln_51_Labor";

   type Platform_Type is ("Cross", "Native", "Library");
   Build : Platform_Type := "Cross";

   type Dir_Type is  ("Target", "Native", "Library");
   Dir : Dir_Type := "Target";

   case Build_Target is
      when "CW183" =>
         Build := "Cross";
         Dir := "Target";
      when "CW194" =>
         Build := "Cross";
         Dir := "Target";
      when "Native" =>
         Build := "Native";
         Dir := "Native";
      when "Library" =>
         Build := "Library";
         Dir := "Library";
   end case;

   -----------------------------------------------------------------------------
   -- Add or extend the dependent directories
   -----------------------------------------------------------------------------

   case Dir is
      when "Target" => AddHost := "target";
      when "Native" => AddHost := "native";
      when "Library" => AddHost := "library";
   end case;

   AddPath := AddPath & AddHost;

   case Simulation is
      when "Off" =>
         AddSim  := "sim_off";
      when "On"  =>
         AddSim  := "sim_on";
         AddPath := AddPath & "_sim";
   end case;

   case Build_Target is
      when "CW183"  =>
         AddBoard  := "cw183";
      when "CW194"  =>
         AddBoard  := "cw194";
         AddPath := AddPath & "_cw194";
      when "Native" => null;
      when "Library" => null;
   end case;

   -- Add specific src directories to standard /public and /private directories defined at the top:
   --
   Source_Dir_Sim         := Source_Dir_Sim         & (src_private & "/" & AddSim);
   Source_Dir_Host        := Source_Dir_Host        & (src_private & "/" & AddHost);
   Source_Dir_HostSim     := Source_Dir_HostSim     & (src_private & "/" & AddPath);
   Source_Dir_TargetSim   := Source_Dir_TargetSim   & (src_private & "/" & AddHost);
   Source_Dir_TargetBoard := Source_Dir_TargetBoard & (src_private & "/" & AddHost);

   -- Add additional special src sub-directories like Sim and Board:
   --
   case Dir is
      when "Target" =>
         Source_Dir_TargetSim   :=  Source_Dir_TargetSim   & (src_private & "/" & AddHost & "/" & AddSim);
         Source_Dir_TargetBoard :=  Source_Dir_TargetBoard & (src_private & "/" & AddHost & "/" & AddBoard);
      when "Native" =>
         null;
      when "Library" =>
         null;
   end case;

   case Simulation is
      when "Off" =>
         case Dir is
            when "Target" =>
               ExecPath := external("EXE_PATH_VXWORKS", "bin/" & AddPath);
            when "Native" =>
               ExecPath := external("EXE_PATH_PC", "bin/" & AddPath);
            when "Library" =>
               ExecPath := external("EXE_PATH_PC", "lib/" & AddPath);
         end case;

      when "On"  =>
         case Dir is
            when "Target" =>
               ExecPath := external("EXE_PATH_VXWORKS_SIM", external("EXE_PATH_VXWORKS", "bin/" & AddPath));
            when "Native" =>
               ExecPath := external("EXE_PATH_PC_SIM",      external("EXE_PATH_PC", "bin/" & AddPath));
            when "Library" =>
               ExecPath := external("EXE_PATH_PC_SIM",      external("EXE_PATH_PC", "lib/" & AddPath));
         end case;
   end case;

   -----------------------------------------------------------------------------
   -- Set compiler and environment switches dependent on build setting
   -----------------------------------------------------------------------------

   Compiler_Switches         := ("-O1", "-gnatf", "-gnat05", "-gnato", "-fstack-check", "-g");
   Compiler_Switches_Cross   := ("-mlongcall"); --"-gnatwl"
   Compiler_Switches_Native  := ();
   Compiler_Switches_Library := ();

   Builder_Switches          := ("-m", "-s", "-j0");
   Builder_Switches_CW183    := ();
   Builder_Switches_CW194    := ();

   case Build_Target is
      when "CW183" =>
         Compiler_Switches := Compiler_Switches & Compiler_Switches_Cross;
         Builder_Switches  := Builder_Switches & Builder_Switches_CW183;
      when "CW194" =>
         Compiler_Switches := Compiler_Switches & Compiler_Switches_Cross;
         Builder_Switches  := Builder_Switches & Builder_Switches_CW194;
      when "Native" =>
         Compiler_Switches := Compiler_Switches & Compiler_Switches_Native;
      when "Library" =>
         Compiler_Switches := Compiler_Switches & Compiler_Switches_Library;
         for Library_Kind use "dynamic";
         for Library_Auto_Init use "True";
   end case;

   Linker_Switches := ("-g", "-fprofile-generate");
   Binder_Switches := ("-d49k");
   Debug_Switches  := ();
   Coding_Standard_File := external ("CODING_STANDARD_FILE", project'Project_Dir & "/coding_standard");
   Pretty_Printer_Switches := ("-kU", "-aL", "-nL", "-pU", "-A1", "-A2", "-A3", "-A4", "-A5", "-M101",
                               "--no-separate-is", "--no-separate-loop-then", "--use-on-new-line",
                               "--separate-stmt-name", "--preserve-blank-lines");

   Test_directory := "../../unit_test/gnattest/tests";
   Harness_directory := "../../unit_test/gnattest/harness";

   -----------------------------------------------------------------------------

   package Naming is
      for Spec_Suffix ("ada") use ".1.ada";
      for Body_Suffix ("ada") use ".2.ada";
      for Separate_Suffix use ".2.ada";
      for Casing use "lowercase";
      for Dot_Replacement use ".";
   end Naming;

   -----------------------------------------------------------------------------

   case Build_Target is
      when "CW183" =>
         for Target use "powerpc-wrs-vxworks";
         for Runtime ("Ada") use "kernel";
      when "CW194" =>
         for Target use "e500v2-wrs-vxworks";
         for Runtime ("Ada") use "kernel-smp";
      when "Native" =>
         for Runtime ("Ada") use "";
      when "Library" =>
         for Runtime ("Ada") use "";
   end case;

   package Ide is
      case Build_Target is
         when "CW183" =>
            null;
         when "CW194" =>
            for Communication_Protocol use "dfw";
            case Debug is
               when "Sisseln_51_Labor"  =>
                  for Program_Host use "Sisseln_51_Labor";
            end case;
         when "Native" =>
            null;
         when "Library" =>
            null;
      end case;
   end Ide;

end Config;
