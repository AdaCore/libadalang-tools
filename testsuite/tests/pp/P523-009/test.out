pragma Ada_95;
pragma Warnings (Off);
pragma Source_File_Name (ada_main, Spec_File_Name => "b__test069.2.ads");
pragma Source_File_Name (ada_main, Body_File_Name => "b__test069.2.adb");
pragma Suppress (Overflow_Check);
with Ada.Exceptions;

package body ada_main is

   E103 : Short_Integer;
   pragma Import (Ada, E103, "system__os_lib_E");
   E014 : Short_Integer;
   pragma Import (Ada, E014, "system__soft_links_E");
   E024 : Short_Integer;
   pragma Import (Ada, E024, "system__exception_table_E");
   E088 : Short_Integer;
   pragma Import (Ada, E088, "ada__io_exceptions_E");
   E047 : Short_Integer;
   pragma Import (Ada, E047, "ada__strings_E");
   E049 : Short_Integer;
   pragma Import (Ada, E049, "ada__strings__maps_E");
   E053 : Short_Integer;
   pragma Import (Ada, E053, "ada__strings__maps__constants_E");
   E090 : Short_Integer;
   pragma Import (Ada, E090, "ada__tags_E");
   E087 : Short_Integer;
   pragma Import (Ada, E087, "ada__streams_E");
   E064 : Short_Integer;
   pragma Import (Ada, E064, "interfaces__c_E");
   E026 : Short_Integer;
   pragma Import (Ada, E026, "system__exceptions_E");
   E106 : Short_Integer;
   pragma Import (Ada, E106, "system__file_control_block_E");
   E126 : Short_Integer;
   pragma Import (Ada, E126, "ada__streams__stream_io_E");
   E098 : Short_Integer;
   pragma Import (Ada, E098, "system__file_io_E");
   E101 : Short_Integer;
   pragma Import (Ada, E101, "system__finalization_root_E");
   E099 : Short_Integer;
   pragma Import (Ada, E099, "ada__finalization_E");
   E118 : Short_Integer;
   pragma Import (Ada, E118, "system__storage_pools_E");
   E114 : Short_Integer;
   pragma Import (Ada, E114, "system__finalization_masters_E");
   E062 : Short_Integer;
   pragma Import (Ada, E062, "system__object_reader_E");
   E042 : Short_Integer;
   pragma Import (Ada, E042, "system__dwarf_lines_E");
   E120 : Short_Integer;
   pragma Import (Ada, E120, "system__pool_global_E");
   E018 : Short_Integer;
   pragma Import (Ada, E018, "system__secondary_stack_E");
   E037 : Short_Integer;
   pragma Import (Ada, E037, "system__traceback__symbolic_E");
   E007 : Short_Integer;
   pragma Import (Ada, E007, "ada__text_io_E");
   E112 : Short_Integer;
   pragma Import (Ada, E112, "stream_buffer_E");
   E002 : Short_Integer;
   pragma Import (Ada, E002, "test069_E");
   E110 : Short_Integer;
   pragma Import (Ada, E110, "test_queues_E");
   E108 : Short_Integer;
   pragma Import (Ada, E108, "test_refactoring_E");

   Local_Priority_Specific_Dispatching : constant String := "";
   Local_Interrupt_States              : constant String := "";

   Is_Elaborated : Boolean := False;

   procedure finalize_library is
   begin
      E007 := E007 - 1;
      declare
         procedure F1;
         pragma Import (Ada, F1, "ada__text_io__finalize_spec");
      begin
         F1;
      end;
      declare
         procedure F2;
         pragma Import (Ada, F2, "system__file_io__finalize_body");
      begin
         E098 := E098 - 1;
         F2;
      end;
      E114 := E114 - 1;
      E120 := E120 - 1;
      declare
         procedure F3;
         pragma Import (Ada, F3, "system__pool_global__finalize_spec");
      begin
         F3;
      end;
      declare
         procedure F4;
         pragma Import
           (Ada, F4, "system__finalization_masters__finalize_spec");
      begin
         F4;
      end;
      E126 := E126 - 1;
      declare
         procedure F5;
         pragma Import (Ada, F5, "ada__streams__stream_io__finalize_spec");
      begin
         F5;
      end;
      declare
         procedure Reraise_Library_Exception_If_Any;
         pragma Import
           (Ada, Reraise_Library_Exception_If_Any,
            "__gnat_reraise_library_exception_if_any");
      begin
         Reraise_Library_Exception_If_Any;
      end;
   end finalize_library;

   procedure adafinal is
      procedure s_stalib_adafinal;
      pragma Import
        (C, s_stalib_adafinal, "system__standard_library__adafinal");

      procedure Runtime_Finalize;
      pragma Import (C, Runtime_Finalize, "__gnat_runtime_finalize");

   begin
      if not Is_Elaborated then
         return;
      end if;
      Is_Elaborated := False;
      Runtime_Finalize;
      s_stalib_adafinal;
   end adafinal;

   type No_Param_Proc is access procedure;

   procedure adainit is
      Main_Priority : Integer;
      pragma Import (C, Main_Priority, "__gl_main_priority");
      Time_Slice_Value : Integer;
      pragma Import (C, Time_Slice_Value, "__gl_time_slice_val");
      WC_Encoding : Character;
      pragma Import (C, WC_Encoding, "__gl_wc_encoding");
      Locking_Policy : Character;
      pragma Import (C, Locking_Policy, "__gl_locking_policy");
      Queuing_Policy : Character;
      pragma Import (C, Queuing_Policy, "__gl_queuing_policy");
      Task_Dispatching_Policy : Character;
      pragma Import
        (C, Task_Dispatching_Policy, "__gl_task_dispatching_policy");
      Priority_Specific_Dispatching : System.Address;
      pragma Import
        (C, Priority_Specific_Dispatching,
         "__gl_priority_specific_dispatching");
      Num_Specific_Dispatching : Integer;
      pragma Import
        (C, Num_Specific_Dispatching, "__gl_num_specific_dispatching");
      Main_CPU : Integer;
      pragma Import (C, Main_CPU, "__gl_main_cpu");
      Interrupt_States : System.Address;
      pragma Import (C, Interrupt_States, "__gl_interrupt_states");
      Num_Interrupt_States : Integer;
      pragma Import (C, Num_Interrupt_States, "__gl_num_interrupt_states");
      Unreserve_All_Interrupts : Integer;
      pragma Import
        (C, Unreserve_All_Interrupts, "__gl_unreserve_all_interrupts");
      Detect_Blocking : Integer;
      pragma Import (C, Detect_Blocking, "__gl_detect_blocking");
      Default_Stack_Size : Integer;
      pragma Import (C, Default_Stack_Size, "__gl_default_stack_size");
      Leap_Seconds_Support : Integer;
      pragma Import (C, Leap_Seconds_Support, "__gl_leap_seconds_support");
      Bind_Env_Addr : System.Address;
      pragma Import (C, Bind_Env_Addr, "__gl_bind_env_addr");

      procedure Runtime_Initialize (Install_Handler : Integer);
      pragma Import (C, Runtime_Initialize, "__gnat_runtime_initialize");

      Finalize_Library_Objects : No_Param_Proc;
      pragma Import
        (C, Finalize_Library_Objects, "__gnat_finalize_library_objects");
   begin
      if Is_Elaborated then
         return;
      end if;
      Is_Elaborated                 := True;
      Main_Priority                 := -1;
      Time_Slice_Value              := -1;
      WC_Encoding                   := 'b';
      Locking_Policy                := ' ';
      Queuing_Policy                := ' ';
      Task_Dispatching_Policy       := ' ';
      Priority_Specific_Dispatching :=
        Local_Priority_Specific_Dispatching'Address;
      Num_Specific_Dispatching := 0;
      Main_CPU                 := -1;
      Interrupt_States         := Local_Interrupt_States'Address;
      Num_Interrupt_States     := 0;
      Unreserve_All_Interrupts := 0;
      Detect_Blocking          := 0;
      Default_Stack_Size       := 50_176;
      Leap_Seconds_Support     := 0;

      Runtime_Initialize (1);

      Finalize_Library_Objects := finalize_library'Access;

      System.Soft_Links'Elab_Spec;
      System.Exception_Table'Elab_Body;
      E024 := E024 + 1;
      Ada.Io_Exceptions'Elab_Spec;
      E088 := E088 + 1;
      Ada.Strings'Elab_Spec;
      E047 := E047 + 1;
      Ada.Strings.Maps'Elab_Spec;
      Ada.Strings.Maps.Constants'Elab_Spec;
      E053 := E053 + 1;
      Ada.Tags'Elab_Spec;
      Ada.Streams'Elab_Spec;
      E087 := E087 + 1;
      Interfaces.C'Elab_Spec;
      System.Exceptions'Elab_Spec;
      E026 := E026 + 1;
      System.File_Control_Block'Elab_Spec;
      E106 := E106 + 1;
      Ada.Streams.Stream_Io'Elab_Spec;
      E126 := E126 + 1;
      System.Finalization_Root'Elab_Spec;
      E101 := E101 + 1;
      Ada.Finalization'Elab_Spec;
      E099 := E099 + 1;
      System.Storage_Pools'Elab_Spec;
      E118 := E118 + 1;
      System.Finalization_Masters'Elab_Spec;
      System.Object_Reader'Elab_Spec;
      System.Dwarf_Lines'Elab_Spec;
      System.Pool_Global'Elab_Spec;
      E120 := E120 + 1;
      System.Finalization_Masters'Elab_Body;
      E114 := E114 + 1;
      System.File_Io'Elab_Body;
      E098 := E098 + 1;
      E064 := E064 + 1;
      Ada.Tags'Elab_Body;
      E090 := E090 + 1;
      E049 := E049 + 1;
      System.Soft_Links'Elab_Body;
      E014 := E014 + 1;
      System.Os_Lib'Elab_Body;
      E103 := E103 + 1;
      System.Secondary_Stack'Elab_Body;
      E018 := E018 + 1;
      E042 := E042 + 1;
      E062 := E062 + 1;
      System.Traceback.Symbolic'Elab_Body;
      E037 := E037 + 1;
      Ada.Text_Io'Elab_Spec;
      Ada.Text_Io'Elab_Body;
      E007 := E007 + 1;
      E112 := E112 + 1;
      test_queues'Elab_Spec;
      E110 := E110 + 1;
      test_refactoring'Elab_Body;
      E108 := E108 + 1;
      E002 := E002 + 1;
   end adainit;

   procedure Ada_Main_Program;
   pragma Import (Ada, Ada_Main_Program, "_ada_test069");

   function main
     (argc : Integer; argv : System.Address; envp : System.Address)
      return Integer
   is
      procedure Initialize (Addr : System.Address);
      pragma Import (C, Initialize, "__gnat_initialize");

      procedure Finalize;
      pragma Import (C, Finalize, "__gnat_finalize");
      SEH : aliased array (1 .. 2) of Integer;

      Ensure_Reference : aliased System.Address :=
        Ada_Main_Program_Name'Address;
      pragma Volatile (Ensure_Reference);

   begin
      gnat_argc := argc;
      gnat_argv := argv;
      gnat_envp := envp;

      Initialize (SEH'Address);
      adainit;
      Ada_Main_Program;
      adafinal;
      Finalize;
      return (gnat_exit_status);
   end main;

--  BEGIN Object file/option list
   --   C:\Projects\gps_test\Test069_refactoring\obj\native\stream_buffer.2.o
   --   C:\Projects\gps_test\Test069_refactoring\obj\native\test_queues.1.o
--   C:\Projects\gps_test\Test069_refactoring\obj\native\test_refactoring.2.o
   --   C:\Projects\gps_test\Test069_refactoring\obj\native\test069.2.o
   --   -LC:\Projects\gps_test\Test069_refactoring\obj\native\
   --   -LC:\Projects\gps_test\Test069_refactoring\obj\native\
   --   -LC:/gnatpro/7.4.1/lib/gcc/i686-pc-mingw32/4.9.4/adalib/
   --   -static
   --   -lgnat
   --   -Wl,--stack=0x2000000
--  END Object file/option list

end ada_main;
pragma Ada_95;
pragma Warnings (Off);
with System;
package ada_main is

   gnat_argc : Integer;
   gnat_argv : System.Address;
   gnat_envp : System.Address;

   pragma Import (C, gnat_argc);
   pragma Import (C, gnat_argv);
   pragma Import (C, gnat_envp);

   gnat_exit_status : Integer;
   pragma Import (C, gnat_exit_status);

   GNAT_Version : constant String :=
     "GNAT Version: Pro 17.0w (20160318-49)" & ASCII.NUL;
   pragma Export (C, GNAT_Version, "__gnat_version");

   Ada_Main_Program_Name : constant String := "_ada_test069" & ASCII.NUL;
   pragma Export (C, Ada_Main_Program_Name, "__gnat_ada_main_program_name");

   procedure adainit;
   pragma Export (C, adainit, "adainit");

   procedure adafinal;
   pragma Export (C, adafinal, "adafinal");

   function main
     (argc : Integer; argv : System.Address; envp : System.Address)
      return Integer;
   pragma Export (C, main, "main");

   type Version_32 is mod 2**32;
   u00001 : constant Version_32 := 16#f2b1_38d6#;
   pragma Export (C, u00001, "test069B");
   u00002 : constant Version_32 := 16#9373_8ab9#;
   pragma Export (C, u00002, "test069S");
   u00003 : constant Version_32 := 16#b6df_930e#;
   pragma Export (C, u00003, "system__standard_libraryB");
   u00004 : constant Version_32 := 16#ddf3_267e#;
   pragma Export (C, u00004, "system__standard_libraryS");
   u00005 : constant Version_32 := 16#3ffc_8e18#;
   pragma Export (C, u00005, "adaS");
   u00006 : constant Version_32 := 16#4c14_0a9c#;
   pragma Export (C, u00006, "ada__text_ioB");
   u00007 : constant Version_32 := 16#c3f0_1c15#;
   pragma Export (C, u00007, "ada__text_ioS");
   u00008 : constant Version_32 := 16#da4d_2671#;
   pragma Export (C, u00008, "ada__exceptionsB");
   u00009 : constant Version_32 := 16#4c8c_ceba#;
   pragma Export (C, u00009, "ada__exceptionsS");
   u00010 : constant Version_32 := 16#e947_e6a9#;
   pragma Export (C, u00010, "ada__exceptions__last_chance_handlerB");
   u00011 : constant Version_32 := 16#41e5_552e#;
   pragma Export (C, u00011, "ada__exceptions__last_chance_handlerS");
   u00012 : constant Version_32 := 16#2da5_9038#;
   pragma Export (C, u00012, "systemS");
   u00013 : constant Version_32 := 16#5f84_b5ab#;
   pragma Export (C, u00013, "system__soft_linksB");
   u00014 : constant Version_32 := 16#b321_486d#;
   pragma Export (C, u00014, "system__soft_linksS");
   u00015 : constant Version_32 := 16#b01d_ad17#;
   pragma Export (C, u00015, "system__parametersB");
   u00016 : constant Version_32 := 16#538f_9d47#;
   pragma Export (C, u00016, "system__parametersS");
   u00017 : constant Version_32 := 16#0f0c_b66d#;
   pragma Export (C, u00017, "system__secondary_stackB");
   u00018 : constant Version_32 := 16#86c4_5f51#;
   pragma Export (C, u00018, "system__secondary_stackS");
   u00019 : constant Version_32 := 16#39a0_3df9#;
   pragma Export (C, u00019, "system__storage_elementsB");
   u00020 : constant Version_32 := 16#0066_da3c#;
   pragma Export (C, u00020, "system__storage_elementsS");
   u00021 : constant Version_32 := 16#4183_7d1e#;
   pragma Export (C, u00021, "system__stack_checkingB");
   u00022 : constant Version_32 := 16#a31a_fbd0#;
   pragma Export (C, u00022, "system__stack_checkingS");
   u00023 : constant Version_32 := 16#87a4_48ff#;
   pragma Export (C, u00023, "system__exception_tableB");
   u00024 : constant Version_32 := 16#700b_f97a#;
   pragma Export (C, u00024, "system__exception_tableS");
   u00025 : constant Version_32 := 16#ce4a_f020#;
   pragma Export (C, u00025, "system__exceptionsB");
   u00026 : constant Version_32 := 16#45c6_fdce#;
   pragma Export (C, u00026, "system__exceptionsS");
   u00027 : constant Version_32 := 16#4c9e_814d#;
   pragma Export (C, u00027, "system__exceptions__machineS");
   u00028 : constant Version_32 := 16#aa05_63fc#;
   pragma Export (C, u00028, "system__exceptions_debugB");
   u00029 : constant Version_32 := 16#532f_69fc#;
   pragma Export (C, u00029, "system__exceptions_debugS");
   u00030 : constant Version_32 := 16#6c2f_8802#;
   pragma Export (C, u00030, "system__img_intB");
   u00031 : constant Version_32 := 16#2f7e_70fa#;
   pragma Export (C, u00031, "system__img_intS");
   u00032 : constant Version_32 := 16#39df_8c17#;
   pragma Export (C, u00032, "system__tracebackB");
   u00033 : constant Version_32 := 16#7387_4efc#;
   pragma Export (C, u00033, "system__tracebackS");
   u00034 : constant Version_32 := 16#9ed4_9525#;
   pragma Export (C, u00034, "system__traceback_entriesB");
   u00035 : constant Version_32 := 16#2dfe_6648#;
   pragma Export (C, u00035, "system__traceback_entriesS");
   u00036 : constant Version_32 := 16#d2b6_296c#;
   pragma Export (C, u00036, "system__traceback__symbolicB");
   u00037 : constant Version_32 := 16#dd19_f67a#;
   pragma Export (C, u00037, "system__traceback__symbolicS");
   u00038 : constant Version_32 := 16#701f_9d88#;
   pragma Export (C, u00038, "ada__exceptions__tracebackB");
   u00039 : constant Version_32 := 16#2024_5e75#;
   pragma Export (C, u00039, "ada__exceptions__tracebackS");
   u00040 : constant Version_32 := 16#5d34_4636#;
   pragma Export (C, u00040, "system__crtlS");
   u00041 : constant Version_32 := 16#b6a3_5849#;
   pragma Export (C, u00041, "system__dwarf_linesB");
   u00042 : constant Version_32 := 16#4424_9c75#;
   pragma Export (C, u00042, "system__dwarf_linesS");
   u00043 : constant Version_32 := 16#12c2_4a43#;
   pragma Export (C, u00043, "ada__charactersS");
   u00044 : constant Version_32 := 16#8f63_7df8#;
   pragma Export (C, u00044, "ada__characters__handlingB");
   u00045 : constant Version_32 := 16#3b3f_6154#;
   pragma Export (C, u00045, "ada__characters__handlingS");
   u00046 : constant Version_32 := 16#4b7b_b96a#;
   pragma Export (C, u00046, "ada__characters__latin_1S");
   u00047 : constant Version_32 := 16#af50_e98f#;
   pragma Export (C, u00047, "ada__stringsS");
   u00048 : constant Version_32 := 16#e2ea_8656#;
   pragma Export (C, u00048, "ada__strings__mapsB");
   u00049 : constant Version_32 := 16#1e52_6bec#;
   pragma Export (C, u00049, "ada__strings__mapsS");
   u00050 : constant Version_32 := 16#4a6f_6ca4#;
   pragma Export (C, u00050, "system__bit_opsB");
   u00051 : constant Version_32 := 16#0765_e3a3#;
   pragma Export (C, u00051, "system__bit_opsS");
   u00052 : constant Version_32 := 16#1923_ecbb#;
   pragma Export (C, u00052, "system__unsigned_typesS");
   u00053 : constant Version_32 := 16#92f0_5f13#;
   pragma Export (C, u00053, "ada__strings__maps__constantsS");
   u00054 : constant Version_32 := 16#5ab5_5268#;
   pragma Export (C, u00054, "interfacesS");
   u00055 : constant Version_32 := 16#57a3_7a42#;
   pragma Export (C, u00055, "system__address_imageB");
   u00056 : constant Version_32 := 16#8c49_0d02#;
   pragma Export (C, u00056, "system__address_imageS");
   u00057 : constant Version_32 := 16#ec78_c2bf#;
   pragma Export (C, u00057, "system__img_unsB");
   u00058 : constant Version_32 := 16#86d7_d04c#;
   pragma Export (C, u00058, "system__img_unsS");
   u00059 : constant Version_32 := 16#d7aa_c20c#;
   pragma Export (C, u00059, "system__ioB");
   u00060 : constant Version_32 := 16#b3e7_6777#;
   pragma Export (C, u00060, "system__ioS");
   u00061 : constant Version_32 := 16#cf90_9744#;
   pragma Export (C, u00061, "system__object_readerB");
   u00062 : constant Version_32 := 16#6942_daaf#;
   pragma Export (C, u00062, "system__object_readerS");
   u00063 : constant Version_32 := 16#769e_25e6#;
   pragma Export (C, u00063, "interfaces__cB");
   u00064 : constant Version_32 := 16#70be_4e8c#;
   pragma Export (C, u00064, "interfaces__cS");
   u00065 : constant Version_32 := 16#1a74_a354#;
   pragma Export (C, u00065, "system__val_lliB");
   u00066 : constant Version_32 := 16#b781_7698#;
   pragma Export (C, u00066, "system__val_lliS");
   u00067 : constant Version_32 := 16#afdb_f393#;
   pragma Export (C, u00067, "system__val_lluB");
   u00068 : constant Version_32 := 16#63d1_bbc9#;
   pragma Export (C, u00068, "system__val_lluS");
   u00069 : constant Version_32 := 16#27b6_00b2#;
   pragma Export (C, u00069, "system__val_utilB");
   u00070 : constant Version_32 := 16#8105_26c6#;
   pragma Export (C, u00070, "system__val_utilS");
   u00071 : constant Version_32 := 16#d106_0688#;
   pragma Export (C, u00071, "system__case_utilB");
   u00072 : constant Version_32 := 16#09ac_f9ef#;
   pragma Export (C, u00072, "system__case_utilS");
   u00073 : constant Version_32 := 16#84a2_7f0d#;
   pragma Export (C, u00073, "interfaces__c_streamsB");
   u00074 : constant Version_32 := 16#b133_0297#;
   pragma Export (C, u00074, "interfaces__c_streamsS");
   u00075 : constant Version_32 := 16#931f_f6be#;
   pragma Export (C, u00075, "system__exception_tracesB");
   u00076 : constant Version_32 := 16#097a_b0a2#;
   pragma Export (C, u00076, "system__exception_tracesS");
   u00077 : constant Version_32 := 16#ce7d_e326#;
   pragma Export (C, u00077, "system__win32S");
   u00078 : constant Version_32 := 16#8c33_a517#;
   pragma Export (C, u00078, "system__wch_conB");
   u00079 : constant Version_32 := 16#36d8_b2ea#;
   pragma Export (C, u00079, "system__wch_conS");
   u00080 : constant Version_32 := 16#9721_e840#;
   pragma Export (C, u00080, "system__wch_stwB");
   u00081 : constant Version_32 := 16#1bc9_9eeb#;
   pragma Export (C, u00081, "system__wch_stwS");
   u00082 : constant Version_32 := 16#a831_679c#;
   pragma Export (C, u00082, "system__wch_cnvB");
   u00083 : constant Version_32 := 16#396f_0819#;
   pragma Export (C, u00083, "system__wch_cnvS");
   u00084 : constant Version_32 := 16#ece6_fdb6#;
   pragma Export (C, u00084, "system__wch_jisB");
   u00085 : constant Version_32 := 16#b91f_1138#;
   pragma Export (C, u00085, "system__wch_jisS");
   u00086 : constant Version_32 := 16#1055_8b11#;
   pragma Export (C, u00086, "ada__streamsB");
   u00087 : constant Version_32 := 16#2e67_01ab#;
   pragma Export (C, u00087, "ada__streamsS");
   u00088 : constant Version_32 := 16#db5c_917c#;
   pragma Export (C, u00088, "ada__io_exceptionsS");
   u00089 : constant Version_32 := 16#920e_ada5#;
   pragma Export (C, u00089, "ada__tagsB");
   u00090 : constant Version_32 := 16#13ca_27f3#;
   pragma Export (C, u00090, "ada__tagsS");
   u00091 : constant Version_32 := 16#c333_5bfd#;
   pragma Export (C, u00091, "system__htableB");
   u00092 : constant Version_32 := 16#a967_23d2#;
   pragma Export (C, u00092, "system__htableS");
   u00093 : constant Version_32 := 16#089f_5cd0#;
   pragma Export (C, u00093, "system__string_hashB");
   u00094 : constant Version_32 := 16#0b39_48ac#;
   pragma Export (C, u00094, "system__string_hashS");
   u00095 : constant Version_32 := 16#1d91_42a4#;
   pragma Export (C, u00095, "system__val_unsB");
   u00096 : constant Version_32 := 16#098b_0180#;
   pragma Export (C, u00096, "system__val_unsS");
   u00097 : constant Version_32 := 16#b29d_05bd#;
   pragma Export (C, u00097, "system__file_ioB");
   u00098 : constant Version_32 := 16#8ad4_715d#;
   pragma Export (C, u00098, "system__file_ioS");
   u00099 : constant Version_32 := 16#cf41_7de3#;
   pragma Export (C, u00099, "ada__finalizationS");
   u00100 : constant Version_32 := 16#9581_7ed8#;
   pragma Export (C, u00100, "system__finalization_rootB");
   u00101 : constant Version_32 := 16#6257_e3a8#;
   pragma Export (C, u00101, "system__finalization_rootS");
   u00102 : constant Version_32 := 16#9dd5_5695#;
   pragma Export (C, u00102, "system__os_libB");
   u00103 : constant Version_32 := 16#bf5c_e13f#;
   pragma Export (C, u00103, "system__os_libS");
   u00104 : constant Version_32 := 16#1a81_7b8e#;
   pragma Export (C, u00104, "system__stringsB");
   u00105 : constant Version_32 := 16#531a_815e#;
   pragma Export (C, u00105, "system__stringsS");
   u00106 : constant Version_32 := 16#d03a_0a90#;
   pragma Export (C, u00106, "system__file_control_blockS");
   u00107 : constant Version_32 := 16#22ad_1eff#;
   pragma Export (C, u00107, "test_refactoringB");
   u00108 : constant Version_32 := 16#001f_911f#;
   pragma Export (C, u00108, "test_refactoringS");
   u00109 : constant Version_32 := 16#b136_ea9a#;
   pragma Export (C, u00109, "test_queuesB");
   u00110 : constant Version_32 := 16#0121_7fd8#;
   pragma Export (C, u00110, "test_queuesS");
   u00111 : constant Version_32 := 16#1916_721b#;
   pragma Export (C, u00111, "stream_bufferB");
   u00112 : constant Version_32 := 16#b017_9542#;
   pragma Export (C, u00112, "stream_bufferS");
   u00113 : constant Version_32 := 16#6abe_5dbe#;
   pragma Export (C, u00113, "system__finalization_mastersB");
   u00114 : constant Version_32 := 16#7659_a9f2#;
   pragma Export (C, u00114, "system__finalization_mastersS");
   u00115 : constant Version_32 := 16#7268_f812#;
   pragma Export (C, u00115, "system__img_boolB");
   u00116 : constant Version_32 := 16#d87c_e1d3#;
   pragma Export (C, u00116, "system__img_boolS");
   u00117 : constant Version_32 := 16#6d4d_969a#;
   pragma Export (C, u00117, "system__storage_poolsB");
   u00118 : constant Version_32 := 16#0e48_0e95#;
   pragma Export (C, u00118, "system__storage_poolsS");
   u00119 : constant Version_32 := 16#5a89_5de2#;
   pragma Export (C, u00119, "system__pool_globalB");
   u00120 : constant Version_32 := 16#7141_203e#;
   pragma Export (C, u00120, "system__pool_globalS");
   u00121 : constant Version_32 := 16#ee10_1ba4#;
   pragma Export (C, u00121, "system__memoryB");
   u00122 : constant Version_32 := 16#74d8_f60c#;
   pragma Export (C, u00122, "system__memoryS");
   u00123 : constant Version_32 := 16#dfa0_3552#;
   pragma Export (C, u00123, "system__strings__stream_opsB");
   u00124 : constant Version_32 := 16#55d4_bd57#;
   pragma Export (C, u00124, "system__strings__stream_opsS");
   u00125 : constant Version_32 := 16#c0e7_c6c9#;
   pragma Export (C, u00125, "ada__streams__stream_ioB");
   u00126 : constant Version_32 := 16#31fc_8e02#;
   pragma Export (C, u00126, "ada__streams__stream_ioS");
   u00127 : constant Version_32 := 16#5de6_53db#;
   pragma Export (C, u00127, "system__communicationB");
   u00128 : constant Version_32 := 16#34c5_c5ea#;
   pragma Export (C, u00128, "system__communicationS");
   u00129 : constant Version_32 := 16#f4e1_c091#;
   pragma Export (C, u00129, "system__stream_attributesB");
   u00130 : constant Version_32 := 16#8bc3_0a4e#;
   pragma Export (C, u00130, "system__stream_attributesS");
   --  BEGIN ELABORATION ORDER
   --  ada%s
   --  ada.characters%s
   --  ada.characters.handling%s
   --  ada.characters.latin_1%s
   --  interfaces%s
   --  system%s
   --  system.case_util%s
   --  system.case_util%b
   --  system.htable%s
   --  system.img_bool%s
   --  system.img_bool%b
   --  system.img_int%s
   --  system.img_int%b
   --  system.io%s
   --  system.io%b
   --  system.parameters%s
   --  system.parameters%b
   --  system.crtl%s
   --  interfaces.c_streams%s
   --  interfaces.c_streams%b
   --  system.standard_library%s
   --  system.exceptions_debug%s
   --  system.exceptions_debug%b
   --  system.storage_elements%s
   --  system.storage_elements%b
   --  system.stack_checking%s
   --  system.stack_checking%b
   --  system.string_hash%s
   --  system.string_hash%b
   --  system.htable%b
   --  system.strings%s
   --  system.strings%b
   --  system.os_lib%s
   --  system.traceback_entries%s
   --  system.traceback_entries%b
   --  ada.exceptions%s
   --  system.soft_links%s
   --  system.unsigned_types%s
   --  system.img_uns%s
   --  system.img_uns%b
   --  system.val_lli%s
   --  system.val_llu%s
   --  system.val_uns%s
   --  system.val_util%s
   --  system.val_util%b
   --  system.val_uns%b
   --  system.val_llu%b
   --  system.val_lli%b
   --  system.wch_con%s
   --  system.wch_con%b
   --  system.wch_cnv%s
   --  system.wch_jis%s
   --  system.wch_jis%b
   --  system.wch_cnv%b
   --  system.wch_stw%s
   --  system.wch_stw%b
   --  ada.exceptions.last_chance_handler%s
   --  ada.exceptions.last_chance_handler%b
   --  ada.exceptions.traceback%s
   --  system.address_image%s
   --  system.bit_ops%s
   --  system.bit_ops%b
   --  system.exception_table%s
   --  system.exception_table%b
   --  ada.io_exceptions%s
   --  ada.strings%s
   --  ada.strings.maps%s
   --  ada.strings.maps.constants%s
   --  ada.tags%s
   --  ada.streams%s
   --  ada.streams%b
   --  interfaces.c%s
   --  system.communication%s
   --  system.communication%b
   --  system.exceptions%s
   --  system.exceptions%b
   --  system.exceptions.machine%s
   --  system.file_control_block%s
   --  ada.streams.stream_io%s
   --  system.file_io%s
   --  ada.streams.stream_io%b
   --  system.finalization_root%s
   --  system.finalization_root%b
   --  ada.finalization%s
   --  system.storage_pools%s
   --  system.storage_pools%b
   --  system.finalization_masters%s
   --  system.stream_attributes%s
   --  system.stream_attributes%b
   --  system.win32%s
   --  system.exception_traces%s
   --  system.exception_traces%b
   --  system.memory%s
   --  system.memory%b
   --  system.standard_library%b
   --  system.object_reader%s
   --  system.dwarf_lines%s
   --  system.pool_global%s
   --  system.pool_global%b
   --  system.secondary_stack%s
   --  system.finalization_masters%b
   --  system.file_io%b
   --  interfaces.c%b
   --  ada.tags%b
   --  ada.strings.maps%b
   --  system.soft_links%b
   --  system.os_lib%b
   --  ada.characters.handling%b
   --  system.secondary_stack%b
   --  system.dwarf_lines%b
   --  system.object_reader%b
   --  system.address_image%b
   --  ada.exceptions.traceback%b
   --  system.strings.stream_ops%s
   --  system.strings.stream_ops%b
   --  system.traceback%s
   --  system.traceback%b
   --  system.traceback.symbolic%s
   --  system.traceback.symbolic%b
   --  ada.exceptions%b
   --  ada.text_io%s
   --  ada.text_io%b
   --  stream_buffer%s
   --  stream_buffer%b
   --  test069%s
   --  test_queues%s
   --  test_queues%b
   --  test_refactoring%s
   --  test_refactoring%b
   --  test069%b
   --  END ELABORATION ORDER

end ada_main;
pragma Ada_95;
pragma Warnings (Off);
pragma Source_File_Name (ada_main, Spec_File_Name => "b__test070.2.ads");
pragma Source_File_Name (ada_main, Body_File_Name => "b__test070.2.adb");
pragma Suppress (Overflow_Check);
with Ada.Exceptions;

package body ada_main is

   E103 : Short_Integer;
   pragma Import (Ada, E103, "system__os_lib_E");
   E014 : Short_Integer;
   pragma Import (Ada, E014, "system__soft_links_E");
   E024 : Short_Integer;
   pragma Import (Ada, E024, "system__exception_table_E");
   E088 : Short_Integer;
   pragma Import (Ada, E088, "ada__io_exceptions_E");
   E047 : Short_Integer;
   pragma Import (Ada, E047, "ada__strings_E");
   E049 : Short_Integer;
   pragma Import (Ada, E049, "ada__strings__maps_E");
   E053 : Short_Integer;
   pragma Import (Ada, E053, "ada__strings__maps__constants_E");
   E090 : Short_Integer;
   pragma Import (Ada, E090, "ada__tags_E");
   E087 : Short_Integer;
   pragma Import (Ada, E087, "ada__streams_E");
   E064 : Short_Integer;
   pragma Import (Ada, E064, "interfaces__c_E");
   E026 : Short_Integer;
   pragma Import (Ada, E026, "system__exceptions_E");
   E106 : Short_Integer;
   pragma Import (Ada, E106, "system__file_control_block_E");
   E098 : Short_Integer;
   pragma Import (Ada, E098, "system__file_io_E");
   E101 : Short_Integer;
   pragma Import (Ada, E101, "system__finalization_root_E");
   E099 : Short_Integer;
   pragma Import (Ada, E099, "ada__finalization_E");
   E062 : Short_Integer;
   pragma Import (Ada, E062, "system__object_reader_E");
   E042 : Short_Integer;
   pragma Import (Ada, E042, "system__dwarf_lines_E");
   E018 : Short_Integer;
   pragma Import (Ada, E018, "system__secondary_stack_E");
   E037 : Short_Integer;
   pragma Import (Ada, E037, "system__traceback__symbolic_E");
   E007 : Short_Integer;
   pragma Import (Ada, E007, "ada__text_io_E");
   E002 : Short_Integer;
   pragma Import (Ada, E002, "test070_E");

   Local_Priority_Specific_Dispatching : constant String := "";
   Local_Interrupt_States              : constant String := "";

   Is_Elaborated : Boolean := False;

   procedure finalize_library is
   begin
      E007 := E007 - 1;
      declare
         procedure F1;
         pragma Import (Ada, F1, "ada__text_io__finalize_spec");
      begin
         F1;
      end;
      declare
         procedure F2;
         pragma Import (Ada, F2, "system__file_io__finalize_body");
      begin
         E098 := E098 - 1;
         F2;
      end;
      declare
         procedure Reraise_Library_Exception_If_Any;
         pragma Import
           (Ada, Reraise_Library_Exception_If_Any,
            "__gnat_reraise_library_exception_if_any");
      begin
         Reraise_Library_Exception_If_Any;
      end;
   end finalize_library;

   procedure adafinal is
      procedure s_stalib_adafinal;
      pragma Import
        (C, s_stalib_adafinal, "system__standard_library__adafinal");

      procedure Runtime_Finalize;
      pragma Import (C, Runtime_Finalize, "__gnat_runtime_finalize");

   begin
      if not Is_Elaborated then
         return;
      end if;
      Is_Elaborated := False;
      Runtime_Finalize;
      s_stalib_adafinal;
   end adafinal;

   type No_Param_Proc is access procedure;

   procedure adainit is
      Main_Priority : Integer;
      pragma Import (C, Main_Priority, "__gl_main_priority");
      Time_Slice_Value : Integer;
      pragma Import (C, Time_Slice_Value, "__gl_time_slice_val");
      WC_Encoding : Character;
      pragma Import (C, WC_Encoding, "__gl_wc_encoding");
      Locking_Policy : Character;
      pragma Import (C, Locking_Policy, "__gl_locking_policy");
      Queuing_Policy : Character;
      pragma Import (C, Queuing_Policy, "__gl_queuing_policy");
      Task_Dispatching_Policy : Character;
      pragma Import
        (C, Task_Dispatching_Policy, "__gl_task_dispatching_policy");
      Priority_Specific_Dispatching : System.Address;
      pragma Import
        (C, Priority_Specific_Dispatching,
         "__gl_priority_specific_dispatching");
      Num_Specific_Dispatching : Integer;
      pragma Import
        (C, Num_Specific_Dispatching, "__gl_num_specific_dispatching");
      Main_CPU : Integer;
      pragma Import (C, Main_CPU, "__gl_main_cpu");
      Interrupt_States : System.Address;
      pragma Import (C, Interrupt_States, "__gl_interrupt_states");
      Num_Interrupt_States : Integer;
      pragma Import (C, Num_Interrupt_States, "__gl_num_interrupt_states");
      Unreserve_All_Interrupts : Integer;
      pragma Import
        (C, Unreserve_All_Interrupts, "__gl_unreserve_all_interrupts");
      Detect_Blocking : Integer;
      pragma Import (C, Detect_Blocking, "__gl_detect_blocking");
      Default_Stack_Size : Integer;
      pragma Import (C, Default_Stack_Size, "__gl_default_stack_size");
      Leap_Seconds_Support : Integer;
      pragma Import (C, Leap_Seconds_Support, "__gl_leap_seconds_support");
      Bind_Env_Addr : System.Address;
      pragma Import (C, Bind_Env_Addr, "__gl_bind_env_addr");

      procedure Runtime_Initialize (Install_Handler : Integer);
      pragma Import (C, Runtime_Initialize, "__gnat_runtime_initialize");

      Finalize_Library_Objects : No_Param_Proc;
      pragma Import
        (C, Finalize_Library_Objects, "__gnat_finalize_library_objects");
   begin
      if Is_Elaborated then
         return;
      end if;
      Is_Elaborated                 := True;
      Main_Priority                 := -1;
      Time_Slice_Value              := -1;
      WC_Encoding                   := 'b';
      Locking_Policy                := ' ';
      Queuing_Policy                := ' ';
      Task_Dispatching_Policy       := ' ';
      Priority_Specific_Dispatching :=
        Local_Priority_Specific_Dispatching'Address;
      Num_Specific_Dispatching := 0;
      Main_CPU                 := -1;
      Interrupt_States         := Local_Interrupt_States'Address;
      Num_Interrupt_States     := 0;
      Unreserve_All_Interrupts := 0;
      Detect_Blocking          := 0;
      Default_Stack_Size       := 50_176;
      Leap_Seconds_Support     := 0;

      Runtime_Initialize (1);

      Finalize_Library_Objects := finalize_library'Access;

      System.Soft_Links'Elab_Spec;
      System.Exception_Table'Elab_Body;
      E024 := E024 + 1;
      Ada.Io_Exceptions'Elab_Spec;
      E088 := E088 + 1;
      Ada.Strings'Elab_Spec;
      E047 := E047 + 1;
      Ada.Strings.Maps'Elab_Spec;
      Ada.Strings.Maps.Constants'Elab_Spec;
      E053 := E053 + 1;
      Ada.Tags'Elab_Spec;
      Ada.Streams'Elab_Spec;
      E087 := E087 + 1;
      Interfaces.C'Elab_Spec;
      System.Exceptions'Elab_Spec;
      E026 := E026 + 1;
      System.File_Control_Block'Elab_Spec;
      E106 := E106 + 1;
      System.Finalization_Root'Elab_Spec;
      E101 := E101 + 1;
      Ada.Finalization'Elab_Spec;
      E099 := E099 + 1;
      System.Object_Reader'Elab_Spec;
      System.Dwarf_Lines'Elab_Spec;
      System.File_Io'Elab_Body;
      E098 := E098 + 1;
      E064 := E064 + 1;
      Ada.Tags'Elab_Body;
      E090 := E090 + 1;
      E049 := E049 + 1;
      System.Soft_Links'Elab_Body;
      E014 := E014 + 1;
      System.Os_Lib'Elab_Body;
      E103 := E103 + 1;
      System.Secondary_Stack'Elab_Body;
      E018 := E018 + 1;
      E042 := E042 + 1;
      E062 := E062 + 1;
      System.Traceback.Symbolic'Elab_Body;
      E037 := E037 + 1;
      Ada.Text_Io'Elab_Spec;
      Ada.Text_Io'Elab_Body;
      E007 := E007 + 1;
      E002 := E002 + 1;
   end adainit;

   procedure Ada_Main_Program;
   pragma Import (Ada, Ada_Main_Program, "_ada_test070");

   function main
     (argc : Integer; argv : System.Address; envp : System.Address)
      return Integer
   is
      procedure Initialize (Addr : System.Address);
      pragma Import (C, Initialize, "__gnat_initialize");

      procedure Finalize;
      pragma Import (C, Finalize, "__gnat_finalize");
      SEH : aliased array (1 .. 2) of Integer;

      Ensure_Reference : aliased System.Address :=
        Ada_Main_Program_Name'Address;
      pragma Volatile (Ensure_Reference);

   begin
      gnat_argc := argc;
      gnat_argv := argv;
      gnat_envp := envp;

      Initialize (SEH'Address);
      adainit;
      Ada_Main_Program;
      adafinal;
      Finalize;
      return (gnat_exit_status);
   end main;

--  BEGIN Object file/option list
   --   C:\Projects\gps_test\Test070_gnatpp\obj\native\test_gnatpp.1.o
   --   C:\Projects\gps_test\Test070_gnatpp\obj\native\test070.2.o
   --   -LC:\Projects\gps_test\Test070_gnatpp\obj\native\
   --   -LC:\Projects\gps_test\Test070_gnatpp\obj\native\
   --   -LC:/gnatpro/7.4.1/lib/gcc/i686-pc-mingw32/4.9.4/adalib/
   --   -static
   --   -lgnat
   --   -Wl,--stack=0x2000000
--  END Object file/option list

end ada_main;
pragma Ada_95;
pragma Warnings (Off);
with System;
package ada_main is

   gnat_argc : Integer;
   gnat_argv : System.Address;
   gnat_envp : System.Address;

   pragma Import (C, gnat_argc);
   pragma Import (C, gnat_argv);
   pragma Import (C, gnat_envp);

   gnat_exit_status : Integer;
   pragma Import (C, gnat_exit_status);

   GNAT_Version : constant String :=
     "GNAT Version: Pro 17.0w (20160318-49)" & ASCII.NUL;
   pragma Export (C, GNAT_Version, "__gnat_version");

   Ada_Main_Program_Name : constant String := "_ada_test070" & ASCII.NUL;
   pragma Export (C, Ada_Main_Program_Name, "__gnat_ada_main_program_name");

   procedure adainit;
   pragma Export (C, adainit, "adainit");

   procedure adafinal;
   pragma Export (C, adafinal, "adafinal");

   function main
     (argc : Integer; argv : System.Address; envp : System.Address)
      return Integer;
   pragma Export (C, main, "main");

   type Version_32 is mod 2**32;
   u00001 : constant Version_32 := 16#cc8a_ed28#;
   pragma Export (C, u00001, "test070B");
   u00002 : constant Version_32 := 16#241e_d653#;
   pragma Export (C, u00002, "test070S");
   u00003 : constant Version_32 := 16#b6df_930e#;
   pragma Export (C, u00003, "system__standard_libraryB");
   u00004 : constant Version_32 := 16#ddf3_267e#;
   pragma Export (C, u00004, "system__standard_libraryS");
   u00005 : constant Version_32 := 16#3ffc_8e18#;
   pragma Export (C, u00005, "adaS");
   u00006 : constant Version_32 := 16#4c14_0a9c#;
   pragma Export (C, u00006, "ada__text_ioB");
   u00007 : constant Version_32 := 16#c3f0_1c15#;
   pragma Export (C, u00007, "ada__text_ioS");
   u00008 : constant Version_32 := 16#da4d_2671#;
   pragma Export (C, u00008, "ada__exceptionsB");
   u00009 : constant Version_32 := 16#4c8c_ceba#;
   pragma Export (C, u00009, "ada__exceptionsS");
   u00010 : constant Version_32 := 16#e947_e6a9#;
   pragma Export (C, u00010, "ada__exceptions__last_chance_handlerB");
   u00011 : constant Version_32 := 16#41e5_552e#;
   pragma Export (C, u00011, "ada__exceptions__last_chance_handlerS");
   u00012 : constant Version_32 := 16#2da5_9038#;
   pragma Export (C, u00012, "systemS");
   u00013 : constant Version_32 := 16#5f84_b5ab#;
   pragma Export (C, u00013, "system__soft_linksB");
   u00014 : constant Version_32 := 16#b321_486d#;
   pragma Export (C, u00014, "system__soft_linksS");
   u00015 : constant Version_32 := 16#b01d_ad17#;
   pragma Export (C, u00015, "system__parametersB");
   u00016 : constant Version_32 := 16#538f_9d47#;
   pragma Export (C, u00016, "system__parametersS");
   u00017 : constant Version_32 := 16#0f0c_b66d#;
   pragma Export (C, u00017, "system__secondary_stackB");
   u00018 : constant Version_32 := 16#86c4_5f51#;
   pragma Export (C, u00018, "system__secondary_stackS");
   u00019 : constant Version_32 := 16#39a0_3df9#;
   pragma Export (C, u00019, "system__storage_elementsB");
   u00020 : constant Version_32 := 16#0066_da3c#;
   pragma Export (C, u00020, "system__storage_elementsS");
   u00021 : constant Version_32 := 16#4183_7d1e#;
   pragma Export (C, u00021, "system__stack_checkingB");
   u00022 : constant Version_32 := 16#a31a_fbd0#;
   pragma Export (C, u00022, "system__stack_checkingS");
   u00023 : constant Version_32 := 16#87a4_48ff#;
   pragma Export (C, u00023, "system__exception_tableB");
   u00024 : constant Version_32 := 16#700b_f97a#;
   pragma Export (C, u00024, "system__exception_tableS");
   u00025 : constant Version_32 := 16#ce4a_f020#;
   pragma Export (C, u00025, "system__exceptionsB");
   u00026 : constant Version_32 := 16#45c6_fdce#;
   pragma Export (C, u00026, "system__exceptionsS");
   u00027 : constant Version_32 := 16#4c9e_814d#;
   pragma Export (C, u00027, "system__exceptions__machineS");
   u00028 : constant Version_32 := 16#aa05_63fc#;
   pragma Export (C, u00028, "system__exceptions_debugB");
   u00029 : constant Version_32 := 16#532f_69fc#;
   pragma Export (C, u00029, "system__exceptions_debugS");
   u00030 : constant Version_32 := 16#6c2f_8802#;
   pragma Export (C, u00030, "system__img_intB");
   u00031 : constant Version_32 := 16#2f7e_70fa#;
   pragma Export (C, u00031, "system__img_intS");
   u00032 : constant Version_32 := 16#39df_8c17#;
   pragma Export (C, u00032, "system__tracebackB");
   u00033 : constant Version_32 := 16#7387_4efc#;
   pragma Export (C, u00033, "system__tracebackS");
   u00034 : constant Version_32 := 16#9ed4_9525#;
   pragma Export (C, u00034, "system__traceback_entriesB");
   u00035 : constant Version_32 := 16#2dfe_6648#;
   pragma Export (C, u00035, "system__traceback_entriesS");
   u00036 : constant Version_32 := 16#d2b6_296c#;
   pragma Export (C, u00036, "system__traceback__symbolicB");
   u00037 : constant Version_32 := 16#dd19_f67a#;
   pragma Export (C, u00037, "system__traceback__symbolicS");
   u00038 : constant Version_32 := 16#701f_9d88#;
   pragma Export (C, u00038, "ada__exceptions__tracebackB");
   u00039 : constant Version_32 := 16#2024_5e75#;
   pragma Export (C, u00039, "ada__exceptions__tracebackS");
   u00040 : constant Version_32 := 16#5d34_4636#;
   pragma Export (C, u00040, "system__crtlS");
   u00041 : constant Version_32 := 16#b6a3_5849#;
   pragma Export (C, u00041, "system__dwarf_linesB");
   u00042 : constant Version_32 := 16#4424_9c75#;
   pragma Export (C, u00042, "system__dwarf_linesS");
   u00043 : constant Version_32 := 16#12c2_4a43#;
   pragma Export (C, u00043, "ada__charactersS");
   u00044 : constant Version_32 := 16#8f63_7df8#;
   pragma Export (C, u00044, "ada__characters__handlingB");
   u00045 : constant Version_32 := 16#3b3f_6154#;
   pragma Export (C, u00045, "ada__characters__handlingS");
   u00046 : constant Version_32 := 16#4b7b_b96a#;
   pragma Export (C, u00046, "ada__characters__latin_1S");
   u00047 : constant Version_32 := 16#af50_e98f#;
   pragma Export (C, u00047, "ada__stringsS");
   u00048 : constant Version_32 := 16#e2ea_8656#;
   pragma Export (C, u00048, "ada__strings__mapsB");
   u00049 : constant Version_32 := 16#1e52_6bec#;
   pragma Export (C, u00049, "ada__strings__mapsS");
   u00050 : constant Version_32 := 16#4a6f_6ca4#;
   pragma Export (C, u00050, "system__bit_opsB");
   u00051 : constant Version_32 := 16#0765_e3a3#;
   pragma Export (C, u00051, "system__bit_opsS");
   u00052 : constant Version_32 := 16#1923_ecbb#;
   pragma Export (C, u00052, "system__unsigned_typesS");
   u00053 : constant Version_32 := 16#92f0_5f13#;
   pragma Export (C, u00053, "ada__strings__maps__constantsS");
   u00054 : constant Version_32 := 16#5ab5_5268#;
   pragma Export (C, u00054, "interfacesS");
   u00055 : constant Version_32 := 16#57a3_7a42#;
   pragma Export (C, u00055, "system__address_imageB");
   u00056 : constant Version_32 := 16#8c49_0d02#;
   pragma Export (C, u00056, "system__address_imageS");
   u00057 : constant Version_32 := 16#ec78_c2bf#;
   pragma Export (C, u00057, "system__img_unsB");
   u00058 : constant Version_32 := 16#86d7_d04c#;
   pragma Export (C, u00058, "system__img_unsS");
   u00059 : constant Version_32 := 16#d7aa_c20c#;
   pragma Export (C, u00059, "system__ioB");
   u00060 : constant Version_32 := 16#b3e7_6777#;
   pragma Export (C, u00060, "system__ioS");
   u00061 : constant Version_32 := 16#cf90_9744#;
   pragma Export (C, u00061, "system__object_readerB");
   u00062 : constant Version_32 := 16#6942_daaf#;
   pragma Export (C, u00062, "system__object_readerS");
   u00063 : constant Version_32 := 16#769e_25e6#;
   pragma Export (C, u00063, "interfaces__cB");
   u00064 : constant Version_32 := 16#70be_4e8c#;
   pragma Export (C, u00064, "interfaces__cS");
   u00065 : constant Version_32 := 16#1a74_a354#;
   pragma Export (C, u00065, "system__val_lliB");
   u00066 : constant Version_32 := 16#b781_7698#;
   pragma Export (C, u00066, "system__val_lliS");
   u00067 : constant Version_32 := 16#afdb_f393#;
   pragma Export (C, u00067, "system__val_lluB");
   u00068 : constant Version_32 := 16#63d1_bbc9#;
   pragma Export (C, u00068, "system__val_lluS");
   u00069 : constant Version_32 := 16#27b6_00b2#;
   pragma Export (C, u00069, "system__val_utilB");
   u00070 : constant Version_32 := 16#8105_26c6#;
   pragma Export (C, u00070, "system__val_utilS");
   u00071 : constant Version_32 := 16#d106_0688#;
   pragma Export (C, u00071, "system__case_utilB");
   u00072 : constant Version_32 := 16#09ac_f9ef#;
   pragma Export (C, u00072, "system__case_utilS");
   u00073 : constant Version_32 := 16#84a2_7f0d#;
   pragma Export (C, u00073, "interfaces__c_streamsB");
   u00074 : constant Version_32 := 16#b133_0297#;
   pragma Export (C, u00074, "interfaces__c_streamsS");
   u00075 : constant Version_32 := 16#931f_f6be#;
   pragma Export (C, u00075, "system__exception_tracesB");
   u00076 : constant Version_32 := 16#097a_b0a2#;
   pragma Export (C, u00076, "system__exception_tracesS");
   u00077 : constant Version_32 := 16#ce7d_e326#;
   pragma Export (C, u00077, "system__win32S");
   u00078 : constant Version_32 := 16#8c33_a517#;
   pragma Export (C, u00078, "system__wch_conB");
   u00079 : constant Version_32 := 16#36d8_b2ea#;
   pragma Export (C, u00079, "system__wch_conS");
   u00080 : constant Version_32 := 16#9721_e840#;
   pragma Export (C, u00080, "system__wch_stwB");
   u00081 : constant Version_32 := 16#1bc9_9eeb#;
   pragma Export (C, u00081, "system__wch_stwS");
   u00082 : constant Version_32 := 16#a831_679c#;
   pragma Export (C, u00082, "system__wch_cnvB");
   u00083 : constant Version_32 := 16#396f_0819#;
   pragma Export (C, u00083, "system__wch_cnvS");
   u00084 : constant Version_32 := 16#ece6_fdb6#;
   pragma Export (C, u00084, "system__wch_jisB");
   u00085 : constant Version_32 := 16#b91f_1138#;
   pragma Export (C, u00085, "system__wch_jisS");
   u00086 : constant Version_32 := 16#1055_8b11#;
   pragma Export (C, u00086, "ada__streamsB");
   u00087 : constant Version_32 := 16#2e67_01ab#;
   pragma Export (C, u00087, "ada__streamsS");
   u00088 : constant Version_32 := 16#db5c_917c#;
   pragma Export (C, u00088, "ada__io_exceptionsS");
   u00089 : constant Version_32 := 16#920e_ada5#;
   pragma Export (C, u00089, "ada__tagsB");
   u00090 : constant Version_32 := 16#13ca_27f3#;
   pragma Export (C, u00090, "ada__tagsS");
   u00091 : constant Version_32 := 16#c333_5bfd#;
   pragma Export (C, u00091, "system__htableB");
   u00092 : constant Version_32 := 16#a967_23d2#;
   pragma Export (C, u00092, "system__htableS");
   u00093 : constant Version_32 := 16#089f_5cd0#;
   pragma Export (C, u00093, "system__string_hashB");
   u00094 : constant Version_32 := 16#0b39_48ac#;
   pragma Export (C, u00094, "system__string_hashS");
   u00095 : constant Version_32 := 16#1d91_42a4#;
   pragma Export (C, u00095, "system__val_unsB");
   u00096 : constant Version_32 := 16#098b_0180#;
   pragma Export (C, u00096, "system__val_unsS");
   u00097 : constant Version_32 := 16#b29d_05bd#;
   pragma Export (C, u00097, "system__file_ioB");
   u00098 : constant Version_32 := 16#8ad4_715d#;
   pragma Export (C, u00098, "system__file_ioS");
   u00099 : constant Version_32 := 16#cf41_7de3#;
   pragma Export (C, u00099, "ada__finalizationS");
   u00100 : constant Version_32 := 16#9581_7ed8#;
   pragma Export (C, u00100, "system__finalization_rootB");
   u00101 : constant Version_32 := 16#6257_e3a8#;
   pragma Export (C, u00101, "system__finalization_rootS");
   u00102 : constant Version_32 := 16#9dd5_5695#;
   pragma Export (C, u00102, "system__os_libB");
   u00103 : constant Version_32 := 16#bf5c_e13f#;
   pragma Export (C, u00103, "system__os_libS");
   u00104 : constant Version_32 := 16#1a81_7b8e#;
   pragma Export (C, u00104, "system__stringsB");
   u00105 : constant Version_32 := 16#531a_815e#;
   pragma Export (C, u00105, "system__stringsS");
   u00106 : constant Version_32 := 16#d03a_0a90#;
   pragma Export (C, u00106, "system__file_control_blockS");
   u00107 : constant Version_32 := 16#d986_832a#;
   pragma Export (C, u00107, "test_gnatppS");
   u00108 : constant Version_32 := 16#ee10_1ba4#;
   pragma Export (C, u00108, "system__memoryB");
   u00109 : constant Version_32 := 16#74d8_f60c#;
   pragma Export (C, u00109, "system__memoryS");
   --  BEGIN ELABORATION ORDER
   --  ada%s
   --  ada.characters%s
   --  ada.characters.handling%s
   --  ada.characters.latin_1%s
   --  interfaces%s
   --  system%s
   --  system.case_util%s
   --  system.case_util%b
   --  system.htable%s
   --  system.img_int%s
   --  system.img_int%b
   --  system.io%s
   --  system.io%b
   --  system.parameters%s
   --  system.parameters%b
   --  system.crtl%s
   --  interfaces.c_streams%s
   --  interfaces.c_streams%b
   --  system.standard_library%s
   --  system.exceptions_debug%s
   --  system.exceptions_debug%b
   --  system.storage_elements%s
   --  system.storage_elements%b
   --  system.stack_checking%s
   --  system.stack_checking%b
   --  system.string_hash%s
   --  system.string_hash%b
   --  system.htable%b
   --  system.strings%s
   --  system.strings%b
   --  system.os_lib%s
   --  system.traceback_entries%s
   --  system.traceback_entries%b
   --  ada.exceptions%s
   --  system.soft_links%s
   --  system.unsigned_types%s
   --  system.img_uns%s
   --  system.img_uns%b
   --  system.val_lli%s
   --  system.val_llu%s
   --  system.val_uns%s
   --  system.val_util%s
   --  system.val_util%b
   --  system.val_uns%b
   --  system.val_llu%b
   --  system.val_lli%b
   --  system.wch_con%s
   --  system.wch_con%b
   --  system.wch_cnv%s
   --  system.wch_jis%s
   --  system.wch_jis%b
   --  system.wch_cnv%b
   --  system.wch_stw%s
   --  system.wch_stw%b
   --  ada.exceptions.last_chance_handler%s
   --  ada.exceptions.last_chance_handler%b
   --  ada.exceptions.traceback%s
   --  system.address_image%s
   --  system.bit_ops%s
   --  system.bit_ops%b
   --  system.exception_table%s
   --  system.exception_table%b
   --  ada.io_exceptions%s
   --  ada.strings%s
   --  ada.strings.maps%s
   --  ada.strings.maps.constants%s
   --  ada.tags%s
   --  ada.streams%s
   --  ada.streams%b
   --  interfaces.c%s
   --  system.exceptions%s
   --  system.exceptions%b
   --  system.exceptions.machine%s
   --  system.file_control_block%s
   --  system.file_io%s
   --  system.finalization_root%s
   --  system.finalization_root%b
   --  ada.finalization%s
   --  system.win32%s
   --  system.exception_traces%s
   --  system.exception_traces%b
   --  system.memory%s
   --  system.memory%b
   --  system.standard_library%b
   --  system.object_reader%s
   --  system.dwarf_lines%s
   --  system.secondary_stack%s
   --  system.file_io%b
   --  interfaces.c%b
   --  ada.tags%b
   --  ada.strings.maps%b
   --  system.soft_links%b
   --  system.os_lib%b
   --  ada.characters.handling%b
   --  system.secondary_stack%b
   --  system.dwarf_lines%b
   --  system.object_reader%b
   --  system.address_image%b
   --  ada.exceptions.traceback%b
   --  system.traceback%s
   --  system.traceback%b
   --  system.traceback.symbolic%s
   --  system.traceback.symbolic%b
   --  ada.exceptions%b
   --  ada.text_io%s
   --  ada.text_io%b
   --  test070%s
   --  test_gnatpp%s
   --  test070%b
   --  END ELABORATION ORDER

end ada_main;
procedure Test070;
with Ada.Text_IO;
with test_gnatpp;

procedure test070 is
   switch : test_gnatpp.development_switch := test_gnatpp.none;
begin
   Ada.Text_IO.Put_Line ("Test070 Start");

   Ada.Text_IO.Put_Line
     ("  switch => " & test_gnatpp.development_switch'Image (switch));

   Ada.Text_IO.Put_Line ("Test070 End");
end test070;
package test_gnatpp is

   type development_switch is
     (none,                                                         --  0

      general_tracing,                                              --  1
      --
      -- Additional output in the GCU trace

      detailed_tracing,                                             --  2
      --
      -- Detailed debug output in every 200 Hz cycle

      serial_write_tracing,                                         --  3
      --
      -- Protocol all outgoing bytes

      serial_read_tracing,                                          --  4
      --
      -- Protocol all incoming bytes

      trigger_booster_overwrite_supply,                             --  5
      --
      -- The power supply for the trigger drive is always set to high.

      select_rof_num                                                --  6
      --
      -- Activate the numeric setting of the rate-of-fire. The numeric
      -- value must be set with the function set_rof_num().

);

end test_gnatpp;
