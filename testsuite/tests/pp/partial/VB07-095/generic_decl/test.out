-----------------------------------------------------------------
       Generic instantiation testing
*************************************
generic_instantiation.ads(<GenericSubpInstantiation ["Swap"] generic_instantiation.ads:25:4-25:44>) - 25:1-25:44
^
   procedure Swap is new Exchange (Integer);$
*************************************

*************************************
generic_instantiation.ads(<GenericSubpInstantiation ["Swap"] generic_instantiation.ads:26:4-26:46>) - 26:1-26:46
^
   procedure Swap is new Exchange (Character);$
*************************************

*************************************
generic_instantiation.ads(<GenericSubpInstantiation ["Square"] generic_instantiation.ads:27:4-27:45>) - 27:1-27:45
^
   function Square is new Squaring (Integer);$
*************************************

*************************************
generic_instantiation.ads(<GenericPackageInstantiation ["Int_Vectors"] generic_instantiation.ads:29:4-29:81>) - 29:1-29:81
^
   package Int_Vectors is new Generic_Package_Declaration
     (Integer, Table, "+");$
*************************************


-----------------------------------------------------------------
       Generic package declaration testing
*************************************
generic_package_declaration.ads(<GenericPackageDecl ["Generic_Package_Declaration"] generic_package_declaration.ads:20:1-31:33>) - 20:1-31:33
^
generic
   type Item is private;
   type Vector is array (Positive range <>) of Item;
   with function Sum (X, Y : Item) return Item;

package Generic_Package_Declaration is

   function Sum (A, B : Vector) return Vector;
   function Sigma (A : Vector) return Item;
   Length_Error : exception;

end Generic_Package_Declaration;$
*************************************


-----------------------------------------------------------------
       Generic subprogram declaration testing
*************************************
generic_subprogram_declaration.ads(<GenericSubpDecl ["Exchange"] generic_subprogram_declaration.ads:22:4-24:43>) - 22:1-24:43
^
   generic
      type Elem is private;
   procedure Exchange (U, V : in out Elem);$
*************************************

*************************************
generic_subprogram_declaration.ads(<GenericSubpDecl ["Squaring"] generic_subprogram_declaration.ads:26:4-30:44>) - 26:1-30:44
^
   generic
      type Item (<>) is private;
      with function "*" (U, V : Item) return Item is <>;

   function Squaring (X : Item) return Item;$
*************************************

