@@--  Template for the bodies of the Write and Read procedures for an array
@@--  type.
@@--  @_GLOBAL_PREFIX_@ Prefix used to prefix all entities local to the unit.
@@--  @_TY_PREFIX_@ Prefix used to prefix all entities for the current type.
@@--  @_TY_NAME_@ Name of the current type.
@@--  @_ADA_DIM_@ Suffixes of the array attributes for each dimension.
@@--  @_COMPONENT_WRITE_@ Call to Write for the component type on
@@--       @_GLOBAL_PREFIX_@_E.
@@--  @_COMPONENT_READ_@ Call to Read for the component type on
@@--       @_GLOBAL_PREFIX_@_E.
@@--
   procedure @_TY_PREFIX_@_Write
     (@_GLOBAL_PREFIX_@_JSON : in out TGen.JSON.JSON_Value;
      @_GLOBAL_PREFIX_@_V    : TGen.TGen_Std.@_TY_NAME_@)
   is
      @_GLOBAL_PREFIX_@_JSON_Array_Sizes : TGen.JSON.JSON_Array;
      @_GLOBAL_PREFIX_@_JSON_Array : TGen.JSON.JSON_Array;
   begin
@@TABLE@@
      TGen.JSON.Append
         (@_GLOBAL_PREFIX_@_JSON_Array_Sizes,
          TGen.JSON.Create (Natural'Image (@_GLOBAL_PREFIX_@_V'Length@_ADA_DIM_@)));
@@END_TABLE@@
      TGen.JSON.Set_Field
         (@_GLOBAL_PREFIX_@_JSON,
          "sizes",
          @_GLOBAL_PREFIX_@_JSON_Array_Sizes);
      for @_GLOBAL_PREFIX_@_E of @_GLOBAL_PREFIX_@_V loop
@_COMPONENT_WRITE_@
      end loop;
      TGen.JSON.Set_Field
         (@_GLOBAL_PREFIX_@_JSON, "array", @_GLOBAL_PREFIX_@_JSON_Array);
   end @_TY_PREFIX_@_Write;

   procedure @_TY_PREFIX_@_Read
     (@_GLOBAL_PREFIX_@_JSON : TGen.JSON.JSON_Value;
      @_GLOBAL_PREFIX_@_V    : out TGen.TGen_Std.@_TY_NAME_@)
   is
   begin
      if TGen.JSON.Has_Field (@_GLOBAL_PREFIX_@_JSON, "aggregate") then	
@@IF@@ @_ADA_DIM_@ = ""
         declare
            @_GLOBAL_PREFIX_@_Aggregate : constant TGen.JSON.JSON_Value :=	
	       TGen.JSON.Get (@_GLOBAL_PREFIX_@_JSON, "aggregate");
	    @_GLOBAL_PREFIX_@_Value : TGen.JSON.JSON_Value;
	 begin 
	    for Current_Index in @_GLOBAL_PREFIX_@_V'First .. @_GLOBAL_PREFIX_@_V'Last	
	    loop 
	       if TGen.JSON.Has_Field (@_GLOBAL_PREFIX_@_Aggregate, Current_Index'Image) then	
	       	  @_GLOBAL_PREFIX_@_Value := 		  
		      TGen.JSON.Get (@_GLOBAL_PREFIX_@_Aggregate, Current_Index'Image);				  
	       else
	          @_GLOBAL_PREFIX_@_Value := 		  
		      TGen.JSON.Get (@_GLOBAL_PREFIX_@_Aggregate, "others");	
	       end if;		    
	       @_COMPONENT_READ_INDEXED_@
	    end loop;
	 end;
@@ELSE@@
	 raise TGen.Marshalling_Lib.Invalid_Value;
@@END_IF@@
      else
      declare
         @_GLOBAL_PREFIX_@_JSON_Array : constant TGen.JSON.JSON_Array :=
            TGen.JSON.Get (@_GLOBAL_PREFIX_@_JSON, "array");
         Current_Index : Positive :=
            TGen.JSON.Array_First (@_GLOBAL_PREFIX_@_JSON_Array);
      begin
         for @_GLOBAL_PREFIX_@_E of @_GLOBAL_PREFIX_@_V loop
	     @_COMPONENT_READ_@
             @@--  Increment the array index
             Current_Index := TGen.JSON.Array_Next
                (@_GLOBAL_PREFIX_@_JSON_Array, Current_Index);
      	  end loop;

      	  if @_GLOBAL_PREFIX_@_V not in TGen.TGen_Std.@_TY_NAME_@ then
             raise Invalid_Value;
      	  end if;	
      end;    
      end if;
   end @_TY_PREFIX_@_Read;
