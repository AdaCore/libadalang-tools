variables:
   # The common part of the URL for cloning from within a CI
   GIT_CLONE_BASE: https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}:${CI_SERVER_PORT}

stages:
  - build_and_test

#########
# BUILD #
#########

build_and_test:
  services:
     - image:sandbox
     - cpu:8
     - mem:16
  stage: build_and_test
  script:
    - . ~/.aws_container_credentials
    - export PATH=/it/e3/bin:$PATH

    # Tell the anod sandbox to use our repository
    - cd /it/wave
    - anod vcs --add-repo libadalang-tools $CI_PROJECT_DIR

    # Figure out if we're on a sync branch
    - BRANCH=master
    - if [[ $CI_COMMIT_BRANCH =~ ^sync/ ]]; then
         BRANCH=$CI_COMMIT_BRANCH;
      elif [[ $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ ^sync/ ]]; then
         BRANCH=$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME;
      fi

    # Setup the 'anod vcs' for the other repos.
    # Get them from the default branch, or from the same
    # branch as this if it exists.
    - for subproject in laltools-testsuite ; do
         cd /tmp ;
         git clone $GIT_CLONE_BASE/eng/ide/$subproject ;
         cd $subproject ;
         echo "#### for project $subproject..." ;
         if `git show-ref $BRANCH > /dev/null` ; then
             echo "### ...using branch $BRANCH" ;
             git checkout $BRANCH ;
         else
             echo "### ...using the default branch" ;
         fi ;
         cd /it/wave ;
         anod vcs --add-repo $subproject /tmp/$subproject ;
      done ;

    # Build and test
    - anod build libadalang-tools
    - anod test libadalang-tools
    - e3-testsuite-report
        --failure-exit-code 1
        --xunit-output $CI_PROJECT_DIR/xunit_output.xml
        x86_64-linux/laltools-test/results/new/

  artifacts:
    when: always
    paths:
      - xunit_output.xml
    reports:
      junit: xunit_output.xml
